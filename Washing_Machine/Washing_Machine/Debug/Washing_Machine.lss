
Washing_Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  00001084  00001118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001084  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080026c  0080026c  00001284  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000278a  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107c  00000000  00000000  00003c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000113a  00000000  00000000  00004d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00005e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fe  00000000  00000000  0000628c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d65  00000000  00000000  00006b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000078ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0a c3       	rjmp	.+1556   	; 0x656 <__vector_16>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e8       	ldi	r30, 0x84	; 132
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 36       	cpi	r26, 0x6C	; 108
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ac e6       	ldi	r26, 0x6C	; 108
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 38       	cpi	r26, 0x83	; 131
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f0 d2       	rcall	.+1504   	; 0x6a4 <main>
      c4:	dd c7       	rjmp	.+4026   	; 0x1080 <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Button_Init>:
static uint8_t Mode_Button_Num = 0;
static uint8_t Start_Stop_Button_Number = 0;

void Button_Init()
{
	BUTTON_MODE_DDR &= ~(1<<MODE_BUTTON); // AUTO 모드
      c8:	d0 98       	cbi	0x1a, 0	; 26
	BUTTON_STATE_DDR &= ~(1<<STATE_BUTTON); // Manual 모드
      ca:	d1 98       	cbi	0x1a, 1	; 26
	BUTTON_START_STOP_DDR &= ~(1<<START_STOP_BUTTON); // START/STOP
      cc:	d3 98       	cbi	0x1a, 3	; 26
	BUTTON_MANUAL_TIMEUP_DDR &= ~(1<<MANUAL_TIMEUP_BUTTON); // 알람 설정 숫자 UP
      ce:	d2 98       	cbi	0x1a, 2	; 26
      d0:	08 95       	ret

000000d2 <Get_ButtonState>:
	
	return Get_ButtonState(DOWN_BUTTON, &prevDownButtonState); 
}*/

uint8_t Get_ButtonState(uint8_t button, uint8_t *prevButtonState) // 범용버튼 번호, 범용버튼 상태 
{
      d2:	cf 92       	push	r12
      d4:	df 92       	push	r13
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	1f 93       	push	r17
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	eb 01       	movw	r28, r22
	uint8_t curButtonState = 1; // 현재 버튼 상태 = 1
	static uint32_t prevTime=0;  // 이전 시간 = 0 (처음만)
	uint32_t curTime; // 현재시간
	
	curButtonState = (BUTTON_PIN & (1<<button)) >> button; // 버튼이 입력을 받는다 
      e2:	49 b3       	in	r20, 0x19	; 25
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	08 2e       	mov	r0, r24
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <Get_ButtonState+0x1e>
      ec:	22 0f       	add	r18, r18
      ee:	33 1f       	adc	r19, r19
      f0:	0a 94       	dec	r0
      f2:	e2 f7       	brpl	.-8      	; 0xec <Get_ButtonState+0x1a>
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	24 23       	and	r18, r20
      f8:	35 23       	and	r19, r21
      fa:	a9 01       	movw	r20, r18
      fc:	02 c0       	rjmp	.+4      	; 0x102 <Get_ButtonState+0x30>
      fe:	55 95       	asr	r21
     100:	47 95       	ror	r20
     102:	8a 95       	dec	r24
     104:	e2 f7       	brpl	.-8      	; 0xfe <Get_ButtonState+0x2c>
	if ( (curButtonState == 0) && (*prevButtonState == 1) ) // 버튼이 눌렸을때
     106:	41 11       	cpse	r20, r1
     108:	0e c0       	rjmp	.+28     	; 0x126 <Get_ButtonState+0x54>
     10a:	18 81       	ld	r17, Y
     10c:	11 30       	cpi	r17, 0x01	; 1
     10e:	31 f5       	brne	.+76     	; 0x15c <Get_ButtonState+0x8a>
	{
		*prevButtonState = curButtonState; 
     110:	18 82       	st	Y, r1
		prevTime = Get_Millis();// millisCount;
     112:	be d4       	rcall	.+2428   	; 0xa90 <Get_Millis>
     114:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <__data_end>
     118:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <__data_end+0x1>
     11c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end+0x2>
     120:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <__data_end+0x3>
		return 1;
     124:	20 c0       	rjmp	.+64     	; 0x166 <Get_ButtonState+0x94>
	}
	else if ( (curButtonState == 1) && (*prevButtonState == 0) ) // 버튼을 때고있을때
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	d9 f4       	brne	.+54     	; 0x160 <Get_ButtonState+0x8e>
     12a:	18 81       	ld	r17, Y
     12c:	11 11       	cpse	r17, r1
	{
		curTime = Get_Millis();// millisCount; 
     12e:	1a c0       	rjmp	.+52     	; 0x164 <Get_ButtonState+0x92>
     130:	af d4       	rcall	.+2398   	; 0xa90 <Get_Millis>
		if (curTime - prevTime > DEBOUNCE) // 20ms가 경과하면
     132:	c0 90 6c 02 	lds	r12, 0x026C	; 0x80026c <__data_end>
     136:	d0 90 6d 02 	lds	r13, 0x026D	; 0x80026d <__data_end+0x1>
     13a:	e0 90 6e 02 	lds	r14, 0x026E	; 0x80026e <__data_end+0x2>
     13e:	f0 90 6f 02 	lds	r15, 0x026F	; 0x80026f <__data_end+0x3>
     142:	dc 01       	movw	r26, r24
     144:	cb 01       	movw	r24, r22
     146:	8c 19       	sub	r24, r12
     148:	9d 09       	sbc	r25, r13
     14a:	ae 09       	sbc	r26, r14
     14c:	bf 09       	sbc	r27, r15
     14e:	45 97       	sbiw	r24, 0x15	; 21
     150:	a1 05       	cpc	r26, r1
     152:	b1 05       	cpc	r27, r1
     154:	40 f0       	brcs	.+16     	; 0x166 <Get_ButtonState+0x94>
		{
			*prevButtonState = curButtonState; 
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	88 83       	st	Y, r24
			return 0; // 버튼이 떨어질때 동작
     15a:	05 c0       	rjmp	.+10     	; 0x166 <Get_ButtonState+0x94>
		}
		return 0;
	}
	
	return 0;
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	03 c0       	rjmp	.+6      	; 0x166 <Get_ButtonState+0x94>
     160:	10 e0       	ldi	r17, 0x00	; 0
     162:	01 c0       	rjmp	.+2      	; 0x166 <Get_ButtonState+0x94>
     164:	10 e0       	ldi	r17, 0x00	; 0
}
     166:	81 2f       	mov	r24, r17
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	df 90       	pop	r13
     174:	cf 90       	pop	r12
     176:	08 95       	ret

00000178 <Get_Mode_ButtonState>:

uint8_t Get_Mode_ButtonState()
{
	static uint8_t prevModeButtonState = 1; // 
	
	return Get_ButtonState(MODE_BUTTON, &prevModeButtonState); // 원래 메모리 값을 기억해서 변경하기 위해서 포인터로 버튼 상태를 포인터로 지정
     178:	63 e0       	ldi	r22, 0x03	; 3
     17a:	71 e0       	ldi	r23, 0x01	; 1
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	a9 cf       	rjmp	.-174    	; 0xd2 <Get_ButtonState>
	
}
     180:	08 95       	ret

00000182 <Get_State_ButtonState>:

uint8_t Get_State_ButtonState() // Manual 모드 
{
	static uint8_t prevStartStopButtonState = 1; 
	
	return Get_ButtonState(STATE_BUTTON, &prevStartStopButtonState); 
     182:	62 e0       	ldi	r22, 0x02	; 2
     184:	71 e0       	ldi	r23, 0x01	; 1
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	a4 cf       	rjmp	.-184    	; 0xd2 <Get_ButtonState>
}
     18a:	08 95       	ret

0000018c <Get_Manual_Timeup_ButtonState>:

uint8_t Get_Manual_Timeup_ButtonState() // 스탑워치 RESET
{
	static uint8_t prevResetButtonState = 1; 
	
	return Get_ButtonState(MANUAL_TIMEUP_BUTTON, &prevResetButtonState); 
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	71 e0       	ldi	r23, 0x01	; 1
     190:	82 e0       	ldi	r24, 0x02	; 2
     192:	9f cf       	rjmp	.-194    	; 0xd2 <Get_ButtonState>
}
     194:	08 95       	ret

00000196 <Get_Start_Stop_ButtonState>:

uint8_t Get_Start_Stop_ButtonState() // 알람 설정 숫자 UP
{
	static uint8_t prevUPButtonState = 1; 
	
	return Get_ButtonState(START_STOP_BUTTON, &prevUPButtonState); 
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	71 e0       	ldi	r23, 0x01	; 1
     19a:	83 e0       	ldi	r24, 0x03	; 3
     19c:	9a cf       	rjmp	.-204    	; 0xd2 <Get_ButtonState>
}
     19e:	08 95       	ret

000001a0 <Mode_Change>:
}


void Mode_Change()
{
	if (Get_Mode_ButtonState())
     1a0:	eb df       	rcall	.-42     	; 0x178 <Get_Mode_ButtonState>
     1a2:	88 23       	and	r24, r24
     1a4:	31 f0       	breq	.+12     	; 0x1b2 <Mode_Change+0x12>
	{
		Mode_Button_Num++;
     1a6:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <Mode_Button_Num>
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <Mode_Button_Num>
		LCD_Clear();
	}
	
	if (Get_Start_Stop_ButtonState())
     1b0:	70 d0       	rcall	.+224    	; 0x292 <LCD_Clear>
     1b2:	f1 df       	rcall	.-30     	; 0x196 <Get_Start_Stop_ButtonState>
     1b4:	88 23       	and	r24, r24
     1b6:	31 f0       	breq	.+12     	; 0x1c4 <Mode_Change+0x24>
	{
		Start_Stop_Button_Number++;
     1b8:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <Start_Stop_Button_Number>
     1bc:	8f 5f       	subi	r24, 0xFF	; 255
     1be:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <Start_Stop_Button_Number>
		LCD_Clear();
     1c2:	67 d0       	rcall	.+206    	; 0x292 <LCD_Clear>
	}
	if (Mode_Button_Num == 1)
     1c4:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <Mode_Button_Num>
     1c8:	81 30       	cpi	r24, 0x01	; 1
	{
		Set_Machine_Mode(Manual);
     1ca:	11 f4       	brne	.+4      	; 0x1d0 <Mode_Change+0x30>
     1cc:	aa d2       	rcall	.+1364   	; 0x722 <Set_Machine_Mode>
	}
	else if (Mode_Button_Num == 2)
     1ce:	06 c0       	rjmp	.+12     	; 0x1dc <Mode_Change+0x3c>
     1d0:	82 30       	cpi	r24, 0x02	; 2
	{
		Set_Machine_Mode(Auto);
     1d2:	21 f4       	brne	.+8      	; 0x1dc <Mode_Change+0x3c>
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	a5 d2       	rcall	.+1354   	; 0x722 <Set_Machine_Mode>
		Mode_Button_Num = 0;
     1d8:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <Mode_Button_Num>
	}
	
	if (Start_Stop_Button_Number == 1)
     1dc:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <Start_Stop_Button_Number>
     1e0:	81 30       	cpi	r24, 0x01	; 1
	{
		Set_Machine_Mode(Start);
     1e2:	29 f4       	brne	.+10     	; 0x1ee <Mode_Change+0x4e>
     1e4:	82 e0       	ldi	r24, 0x02	; 2
		Mode_Button_Num = 0;
     1e6:	9d d2       	rcall	.+1338   	; 0x722 <Set_Machine_Mode>
     1e8:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <Mode_Button_Num>
	}
	else if (Start_Stop_Button_Number == 2)
     1ec:	08 95       	ret
     1ee:	82 30       	cpi	r24, 0x02	; 2
	{
		Set_Machine_Mode(Stop);
     1f0:	21 f4       	brne	.+8      	; 0x1fa <Mode_Change+0x5a>
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	96 d2       	rcall	.+1324   	; 0x722 <Set_Machine_Mode>
		Start_Stop_Button_Number = 0;
     1f6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <Start_Stop_Button_Number>
     1fa:	08 95       	ret

000001fc <BuzzerInit>:
 */ 
#include "Buzzer.h"

void BuzzerInit()
{
	TCCR2 |= (0<<CS22) | (1<<CS21) | (1<<CS20);  // 분주비 64
     1fc:	85 b5       	in	r24, 0x25	; 37
     1fe:	83 60       	ori	r24, 0x03	; 3
     200:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<WGM21) | (0<<WGM20); // CTC
     202:	85 b5       	in	r24, 0x25	; 37
     204:	88 60       	ori	r24, 0x08	; 8
     206:	85 bd       	out	0x25, r24	; 37
	BUZZER_DDR |= (1<<BUZZER); // Buzzer 출력 설정
     208:	bf 9a       	sbi	0x17, 7	; 23
     20a:	08 95       	ret

0000020c <LCD_Pulse_Enable>:

char buff_Signal_State[20] = {0};

void LCD_Pulse_Enable()
{
	LCD_ENABLE_PORT |= (1<<LCD_ENABLE); // E ==> HIGH
     20c:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20e:	8f e9       	ldi	r24, 0x9F	; 159
     210:	9f e0       	ldi	r25, 0x0F	; 15
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <LCD_Pulse_Enable+0x6>
     216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_Pulse_Enable+0xc>
     218:	00 00       	nop
	_delay_ms(1);
	LCD_ENABLE_PORT &= ~(1<<LCD_ENABLE); // E ==> LOW
     21a:	91 98       	cbi	0x12, 1	; 18
     21c:	8f e9       	ldi	r24, 0x9F	; 159
     21e:	9f e0       	ldi	r25, 0x0F	; 15
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <LCD_Pulse_Enable+0x14>
     224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_Pulse_Enable+0x1a>
     226:	00 00       	nop
     228:	08 95       	ret

0000022a <LCD_WriteCommand>:
	_delay_ms(1);
}

void LCD_WriteCommand(uint8_t cmdData) // 동작 명령어
{
     22a:	cf 93       	push	r28
     22c:	c8 2f       	mov	r28, r24
	LCD_RS_PORT &= ~(1<<LCD_RS);
     22e:	90 98       	cbi	0x12, 0	; 18
	LCD_DATA_PORT = (LCD_RS_PORT & 0X0f) | (cmdData & 0xf0); // Command 상위 4bit 입력
     230:	82 b3       	in	r24, 0x12	; 18
     232:	8f 70       	andi	r24, 0x0F	; 15
     234:	9c 2f       	mov	r25, r28
     236:	90 7f       	andi	r25, 0xF0	; 240
     238:	89 2b       	or	r24, r25
     23a:	82 bb       	out	0x12, r24	; 18
	LCD_Pulse_Enable();
     23c:	e7 df       	rcall	.-50     	; 0x20c <LCD_Pulse_Enable>
	LCD_DATA_PORT = (LCD_RS_PORT & 0X0f) | ((cmdData & 0x0f)<<4); // Command 하위 4bit 입력
     23e:	82 b3       	in	r24, 0x12	; 18
     240:	28 2f       	mov	r18, r24
     242:	2f 70       	andi	r18, 0x0F	; 15
     244:	30 e1       	ldi	r19, 0x10	; 16
     246:	c3 9f       	mul	r28, r19
     248:	c0 01       	movw	r24, r0
     24a:	11 24       	eor	r1, r1
     24c:	82 2b       	or	r24, r18
	LCD_Pulse_Enable();
     24e:	82 bb       	out	0x12, r24	; 18
     250:	dd df       	rcall	.-70     	; 0x20c <LCD_Pulse_Enable>
}
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) // 데이터 출력
{
     256:	cf 93       	push	r28
     258:	c8 2f       	mov	r28, r24
	LCD_RS_PORT |= (1<<LCD_RS);
     25a:	90 9a       	sbi	0x12, 0	; 18
	LCD_DATA_PORT = (LCD_RS_PORT & 0X0f) | (data & 0xf0); // Data 상위 4bit
     25c:	82 b3       	in	r24, 0x12	; 18
     25e:	8f 70       	andi	r24, 0x0F	; 15
     260:	9c 2f       	mov	r25, r28
     262:	90 7f       	andi	r25, 0xF0	; 240
     264:	89 2b       	or	r24, r25
     266:	82 bb       	out	0x12, r24	; 18
	LCD_Pulse_Enable();
     268:	d1 df       	rcall	.-94     	; 0x20c <LCD_Pulse_Enable>
	LCD_DATA_PORT = (LCD_RS_PORT & 0X0f) | ((data & 0x0f)<<4); // Data 하위 4bit
     26a:	82 b3       	in	r24, 0x12	; 18
     26c:	28 2f       	mov	r18, r24
     26e:	2f 70       	andi	r18, 0x0F	; 15
     270:	30 e1       	ldi	r19, 0x10	; 16
     272:	c3 9f       	mul	r28, r19
     274:	c0 01       	movw	r24, r0
     276:	11 24       	eor	r1, r1
     278:	82 2b       	or	r24, r18
	LCD_Pulse_Enable();
     27a:	82 bb       	out	0x12, r24	; 18
     27c:	c7 df       	rcall	.-114    	; 0x20c <LCD_Pulse_Enable>
}
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <LCD_WriteCommand_Init>:


void LCD_WriteCommand_Init(uint8_t cmdData) // 초기화 동작 명령어
{
	LCD_RS_PORT &= ~(1<<LCD_RS);
     282:	90 98       	cbi	0x12, 0	; 18
	LCD_DATA_PORT = (LCD_RS_PORT & 0X0f) | (cmdData & 0xf0); // Command 상위 4bit
     284:	92 b3       	in	r25, 0x12	; 18
     286:	9f 70       	andi	r25, 0x0F	; 15
     288:	80 7f       	andi	r24, 0xF0	; 240
     28a:	89 2b       	or	r24, r25
     28c:	82 bb       	out	0x12, r24	; 18
	LCD_Pulse_Enable();
     28e:	be cf       	rjmp	.-132    	; 0x20c <LCD_Pulse_Enable>
     290:	08 95       	ret

00000292 <LCD_Clear>:
}


void LCD_Clear(void)
{
	LCD_WriteCommand(COMMAND_CLEAR_DISPLAY); 
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	ca df       	rcall	.-108    	; 0x22a <LCD_WriteCommand>
     296:	8f e3       	ldi	r24, 0x3F	; 63
     298:	9f e1       	ldi	r25, 0x1F	; 31
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_Clear+0x8>
     29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_Clear+0xe>
     2a0:	00 00       	nop
     2a2:	08 95       	ret

000002a4 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init() // LCD 기본 설정
{
	LCD_DATA_DDR = 0xff;
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	81 bb       	out	0x11, r24	; 17
	LCD_RS_DDR |= (1<<LCD_RS);
     2a8:	88 9a       	sbi	0x11, 0	; 17
	LCD_ENABLE_DDR |= (1<<LCD_ENABLE);
     2aa:	89 9a       	sbi	0x11, 1	; 17
     2ac:	2f ef       	ldi	r18, 0xFF	; 255
     2ae:	89 ef       	ldi	r24, 0xF9	; 249
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	21 50       	subi	r18, 0x01	; 1
     2b4:	80 40       	sbci	r24, 0x00	; 0
     2b6:	90 40       	sbci	r25, 0x00	; 0
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <LCD_Init+0xe>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_Init+0x18>
     2bc:	00 00       	nop
	
	_delay_ms(20);
	
	LCD_WriteCommand_Init(0x30);
     2be:	80 e3       	ldi	r24, 0x30	; 48
     2c0:	e0 df       	rcall	.-64     	; 0x282 <LCD_WriteCommand_Init>
     2c2:	8f e1       	ldi	r24, 0x1F	; 31
     2c4:	9e e4       	ldi	r25, 0x4E	; 78
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_Init+0x22>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_Init+0x28>
     2cc:	00 00       	nop
	_delay_ms(5);
	LCD_WriteCommand_Init(0x30);
     2ce:	80 e3       	ldi	r24, 0x30	; 48
     2d0:	d8 df       	rcall	.-80     	; 0x282 <LCD_WriteCommand_Init>
     2d2:	9f ef       	ldi	r25, 0xFF	; 255
     2d4:	23 ec       	ldi	r18, 0xC3	; 195
     2d6:	89 e0       	ldi	r24, 0x09	; 9
     2d8:	91 50       	subi	r25, 0x01	; 1
     2da:	20 40       	sbci	r18, 0x00	; 0
     2dc:	80 40       	sbci	r24, 0x00	; 0
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <LCD_Init+0x34>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_Init+0x3e>
	_delay_ms(200);
	LCD_WriteCommand_Init(0x30);
     2e2:	00 00       	nop
     2e4:	80 e3       	ldi	r24, 0x30	; 48
	LCD_WriteCommand_Init(COMMAND_4_BIT_MODE); // Function Set (N: 디스플레이 행 수(N:0 ==> 1행, N:1 ==> 2행), F: 글자 크기), 설치된 LCD : N:1,F:0
     2e6:	cd df       	rcall	.-102    	; 0x282 <LCD_WriteCommand_Init>
     2e8:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(DISPLAY_OFF); // Display off
     2ea:	cb df       	rcall	.-106    	; 0x282 <LCD_WriteCommand_Init>
     2ec:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_CLEAR_DISPLAY); // Display Clear
     2ee:	9d df       	rcall	.-198    	; 0x22a <LCD_WriteCommand>
     2f0:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteCommand(COMMAND_ENTRY_MODE); // Entry mode set
     2f2:	9b df       	rcall	.-202    	; 0x22a <LCD_WriteCommand>
     2f4:	86 e0       	ldi	r24, 0x06	; 6
     2f6:	99 df       	rcall	.-206    	; 0x22a <LCD_WriteCommand>
	LCD_WriteCommand(DISPLAY_ON); // Display on
     2f8:	8c e0       	ldi	r24, 0x0C	; 12
     2fa:	97 cf       	rjmp	.-210    	; 0x22a <LCD_WriteCommand>
     2fc:	08 95       	ret

000002fe <LCD_Write_string>:
     2fe:	0f 93       	push	r16
}


void LCD_Write_string(char *string)
{
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0;string[i]; i++) //종료 문자를 만날 때까지
     306:	80 81       	ld	r24, Z
     308:	88 23       	and	r24, r24
     30a:	51 f0       	breq	.+20     	; 0x320 <LCD_Write_string+0x22>
     30c:	8f 01       	movw	r16, r30
     30e:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_WriteData(string[i]); // 문자 단위 출력
     310:	a2 df       	rcall	.-188    	; 0x256 <LCD_WriteData>


void LCD_Write_string(char *string)
{
	uint8_t i;
	for(i=0;string[i]; i++) //종료 문자를 만날 때까지
     312:	cf 5f       	subi	r28, 0xFF	; 255
     314:	f8 01       	movw	r30, r16
     316:	ec 0f       	add	r30, r28
     318:	f1 1d       	adc	r31, r1
     31a:	80 81       	ld	r24, Z
     31c:	81 11       	cpse	r24, r1
     31e:	f8 cf       	rjmp	.-16     	; 0x310 <LCD_Write_string+0x12>
	LCD_WriteData(string[i]); // 문자 단위 출력
}
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	08 95       	ret

00000328 <LCD_goto_XY>:
	
	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) +col;
	uint8_t command = 0x80 +address;
	
	LCD_WriteCommand(command); // 커서 이동
     328:	81 70       	andi	r24, 0x01	; 1
     32a:	6f 70       	andi	r22, 0x0F	; 15
     32c:	90 e4       	ldi	r25, 0x40	; 64
     32e:	89 9f       	mul	r24, r25
     330:	60 0d       	add	r22, r0
     332:	11 24       	eor	r1, r1
     334:	86 2f       	mov	r24, r22
     336:	80 58       	subi	r24, 0x80	; 128
     338:	78 cf       	rjmp	.-272    	; 0x22a <LCD_WriteCommand>
     33a:	08 95       	ret

0000033c <Time>:
}

uint8_t Get_Laundry_Mode_State()
{
	return Laundry_Mode;
}
     33c:	b2 d3       	rcall	.+1892   	; 0xaa2 <Inc_Millis>
     33e:	f4 d1       	rcall	.+1000   	; 0x728 <Get_Machine_Mode>
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	c9 f4       	brne	.+50     	; 0x376 <Time+0x3a>
     344:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <timecount>
     348:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <timecount+0x1>
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <timecount+0x1>
     352:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <timecount>
     356:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <timecount>
     35a:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <timecount+0x1>
     35e:	88 3e       	cpi	r24, 0xE8	; 232
     360:	93 40       	sbci	r25, 0x03	; 3
     362:	48 f0       	brcs	.+18     	; 0x376 <Time+0x3a>
     364:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <timecount+0x1>
     368:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <timecount>
     36c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
     370:	81 50       	subi	r24, 0x01	; 1
     372:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Laundry_time>
     376:	08 95       	ret

00000378 <Display_LaundryTime>:


void Display_LaundryTime(uint8_t state)
{
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	c4 56       	subi	r28, 0x64	; 100
     386:	d1 09       	sbc	r29, r1
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
	char Remaining_Time[100] = {0};
     392:	fe 01       	movw	r30, r28
     394:	31 96       	adiw	r30, 0x01	; 1
     396:	94 e6       	ldi	r25, 0x64	; 100
     398:	df 01       	movw	r26, r30
     39a:	1d 92       	st	X+, r1
     39c:	9a 95       	dec	r25
     39e:	e9 f7       	brne	.-6      	; 0x39a <Display_LaundryTime+0x22>
		
	switch(state)
     3a0:	82 30       	cpi	r24, 0x02	; 2
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <Display_LaundryTime+0x2e>
     3a4:	70 c0       	rjmp	.+224    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     3a6:	28 f4       	brcc	.+10     	; 0x3b2 <Display_LaundryTime+0x3a>
     3a8:	88 23       	and	r24, r24
     3aa:	51 f0       	breq	.+20     	; 0x3c0 <Display_LaundryTime+0x48>
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	79 f0       	breq	.+30     	; 0x3ce <Display_LaundryTime+0x56>
     3b0:	46 c1       	rjmp	.+652    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     3b2:	83 30       	cpi	r24, 0x03	; 3
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <Display_LaundryTime+0x40>
     3b6:	c3 c0       	rjmp	.+390    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	09 f4       	brne	.+2      	; 0x3be <Display_LaundryTime+0x46>
     3bc:	1a c1       	rjmp	.+564    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
     3be:	3f c1       	rjmp	.+638    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
	{
		case Ready:
		Laundry_time = Get_Wash_Time();
     3c0:	b6 d1       	rcall	.+876    	; 0x72e <Get_Wash_Time>
     3c2:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Laundry_time>
	}
}

void Set_Laundry_Mode_State(uint8_t LaundryMode)
{
	Laundry_Mode = LaundryMode;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <Laundry_Mode>
     3cc:	38 c1       	rjmp	.+624    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
		Laundry_time = Get_Wash_Time();
		Set_Laundry_Mode_State(W);
		break;
		
		case W:
		if (Laundry_time <10)
     3ce:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
     3d2:	8a 30       	cpi	r24, 0x0A	; 10
     3d4:	38 f5       	brcc	.+78     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		{
			
			sprintf(Remaining_Time, "----- WASH -----"); // 알람 설정 값 출력
     3d6:	81 e1       	ldi	r24, 0x11	; 17
     3d8:	e4 e0       	ldi	r30, 0x04	; 4
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	8e 01       	movw	r16, r28
     3de:	0f 5f       	subi	r16, 0xFF	; 255
     3e0:	1f 4f       	sbci	r17, 0xFF	; 255
     3e2:	d8 01       	movw	r26, r16
     3e4:	01 90       	ld	r0, Z+
     3e6:	0d 92       	st	X+, r0
     3e8:	8a 95       	dec	r24
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <Display_LaundryTime+0x6c>
			LCD_goto_XY(0,0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	9b df       	rcall	.-202    	; 0x328 <LCD_goto_XY>
			LCD_Write_string(Remaining_Time);
     3f2:	c8 01       	movw	r24, r16
     3f4:	84 df       	rcall	.-248    	; 0x2fe <LCD_Write_string>
     3f6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
			Run_Number = Laundry_time;
			sprintf(Remaining_Time, "Wash : %02d",Run_Number); // 알람 설정 값 출력
     3fa:	1f 92       	push	r1
     3fc:	8f 93       	push	r24
     3fe:	85 e1       	ldi	r24, 0x15	; 21
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	1f 93       	push	r17
     408:	0f 93       	push	r16
     40a:	5f d3       	rcall	.+1726   	; 0xaca <sprintf>
			LCD_goto_XY(1,0);
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	8b df       	rcall	.-234    	; 0x328 <LCD_goto_XY>
			LCD_Write_string(Remaining_Time);
     412:	c8 01       	movw	r24, r16
     414:	74 df       	rcall	.-280    	; 0x2fe <LCD_Write_string>
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	26 c0       	rjmp	.+76     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     424:	81 e1       	ldi	r24, 0x11	; 17
			
		}
		else
		{
			sprintf(Remaining_Time, "----- WASH -----"); // 알람 설정 값 출력
     426:	e4 e0       	ldi	r30, 0x04	; 4
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	8e 01       	movw	r16, r28
     42c:	0f 5f       	subi	r16, 0xFF	; 255
     42e:	1f 4f       	sbci	r17, 0xFF	; 255
     430:	d8 01       	movw	r26, r16
     432:	01 90       	ld	r0, Z+
     434:	0d 92       	st	X+, r0
     436:	8a 95       	dec	r24
			LCD_goto_XY(0,0);
     438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	74 df       	rcall	.-280    	; 0x328 <LCD_goto_XY>
			LCD_Write_string(Remaining_Time);
     440:	c8 01       	movw	r24, r16
     442:	5d df       	rcall	.-326    	; 0x2fe <LCD_Write_string>
     444:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
			Run_Number = Laundry_time;
			sprintf(Remaining_Time, "Wash : %d",Run_Number); // 알람 설정 값 출력
     448:	1f 92       	push	r1
     44a:	8f 93       	push	r24
     44c:	81 e2       	ldi	r24, 0x21	; 33
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	9f 93       	push	r25
     452:	8f 93       	push	r24
     454:	1f 93       	push	r17
     456:	0f 93       	push	r16
			LCD_goto_XY(1,0);
     458:	38 d3       	rcall	.+1648   	; 0xaca <sprintf>
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	64 df       	rcall	.-312    	; 0x328 <LCD_goto_XY>
			LCD_Write_string(Remaining_Time);
     460:	c8 01       	movw	r24, r16
     462:	4d df       	rcall	.-358    	; 0x2fe <LCD_Write_string>
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
		}
		
		
		if (Laundry_time == 0)
     470:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
     474:	81 11       	cpse	r24, r1
     476:	e3 c0       	rjmp	.+454    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
	}
}

void Set_Laundry_Mode_State(uint8_t LaundryMode)
{
	Laundry_Mode = LaundryMode;
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <Laundry_Mode>
		
		
		if (Laundry_time == 0)
		{
			Set_Laundry_Mode_State(R);
			Laundry_time = Get_Rinse_Time();
     47e:	5f d1       	rcall	.+702    	; 0x73e <Get_Rinse_Time>
     480:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Laundry_time>
     484:	dc c0       	rjmp	.+440    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     486:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
		}
		break;
		
		case R:
		if (Laundry_time <10)
     48a:	8a 30       	cpi	r24, 0x0A	; 10
     48c:	38 f5       	brcc	.+78     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     48e:	80 e1       	ldi	r24, 0x10	; 16
		{
			
			sprintf(Remaining_Time, "---- RINSE ----"); // 알람 설정 값 출력
     490:	eb e2       	ldi	r30, 0x2B	; 43
     492:	f1 e0       	ldi	r31, 0x01	; 1
     494:	8e 01       	movw	r16, r28
     496:	0f 5f       	subi	r16, 0xFF	; 255
     498:	1f 4f       	sbci	r17, 0xFF	; 255
     49a:	d8 01       	movw	r26, r16
     49c:	01 90       	ld	r0, Z+
     49e:	0d 92       	st	X+, r0
     4a0:	8a 95       	dec	r24
			LCD_goto_XY(0,0);
     4a2:	e1 f7       	brne	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
			LCD_Write_string(Remaining_Time);
     4a8:	3f df       	rcall	.-386    	; 0x328 <LCD_goto_XY>
     4aa:	c8 01       	movw	r24, r16
			Run_Number = Laundry_time;
			sprintf(Remaining_Time, "Rinse : %02d",Run_Number); // 알람 설정 값 출력
     4ac:	28 df       	rcall	.-432    	; 0x2fe <LCD_Write_string>
     4ae:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
     4b2:	1f 92       	push	r1
     4b4:	8f 93       	push	r24
     4b6:	8b e3       	ldi	r24, 0x3B	; 59
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	9f 93       	push	r25
     4bc:	8f 93       	push	r24
     4be:	1f 93       	push	r17
     4c0:	0f 93       	push	r16
			LCD_goto_XY(1,0);
     4c2:	03 d3       	rcall	.+1542   	; 0xaca <sprintf>
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	2f df       	rcall	.-418    	; 0x328 <LCD_goto_XY>
			LCD_Write_string(Remaining_Time);
     4ca:	c8 01       	movw	r24, r16
     4cc:	18 df       	rcall	.-464    	; 0x2fe <LCD_Write_string>
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
			
		}
		else
		{
			sprintf(Remaining_Time, "---- RINSE ----"); // 알람 설정 값 출력
     4da:	26 c0       	rjmp	.+76     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     4dc:	80 e1       	ldi	r24, 0x10	; 16
     4de:	eb e2       	ldi	r30, 0x2B	; 43
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	8e 01       	movw	r16, r28
     4e4:	0f 5f       	subi	r16, 0xFF	; 255
     4e6:	1f 4f       	sbci	r17, 0xFF	; 255
     4e8:	d8 01       	movw	r26, r16
     4ea:	01 90       	ld	r0, Z+
     4ec:	0d 92       	st	X+, r0
			LCD_goto_XY(0,0);
     4ee:	8a 95       	dec	r24
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f2:	60 e0       	ldi	r22, 0x00	; 0
			LCD_Write_string(Remaining_Time);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	18 df       	rcall	.-464    	; 0x328 <LCD_goto_XY>
     4f8:	c8 01       	movw	r24, r16
			Run_Number = Laundry_time;
			sprintf(Remaining_Time, "Rinse : %d",Run_Number); // 알람 설정 값 출력
     4fa:	01 df       	rcall	.-510    	; 0x2fe <LCD_Write_string>
     4fc:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
     500:	1f 92       	push	r1
     502:	8f 93       	push	r24
     504:	88 e4       	ldi	r24, 0x48	; 72
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	1f 93       	push	r17
     50e:	0f 93       	push	r16
			LCD_goto_XY(1,0);
     510:	dc d2       	rcall	.+1464   	; 0xaca <sprintf>
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	08 df       	rcall	.-496    	; 0x328 <LCD_goto_XY>
			LCD_Write_string(Remaining_Time);
     518:	c8 01       	movw	r24, r16
     51a:	f1 de       	rcall	.-542    	; 0x2fe <LCD_Write_string>
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
		}
		
		
		if (Laundry_time == 0)
     52c:	81 11       	cpse	r24, r1
     52e:	87 c0       	rjmp	.+270    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     530:	83 e0       	ldi	r24, 0x03	; 3
	}
}

void Set_Laundry_Mode_State(uint8_t LaundryMode)
{
	Laundry_Mode = LaundryMode;
     532:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <Laundry_Mode>
		
		
		if (Laundry_time == 0)
		{
			Set_Laundry_Mode_State(D);
			Laundry_time = Get_Dry_TIme();
     536:	0b d1       	rcall	.+534    	; 0x74e <Get_Dry_TIme>
     538:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Laundry_time>
     53c:	80 c0       	rjmp	.+256    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
		}
		break;
		case D:
		if (Laundry_time <10)
     53e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
     542:	8a 30       	cpi	r24, 0x0A	; 10
     544:	38 f5       	brcc	.+78     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
		{
			
			sprintf(Remaining_Time, "--- SPIN-DRY ---"); // 알람 설정 값 출력
     546:	81 e1       	ldi	r24, 0x11	; 17
     548:	e3 e5       	ldi	r30, 0x53	; 83
     54a:	f1 e0       	ldi	r31, 0x01	; 1
     54c:	8e 01       	movw	r16, r28
     54e:	0f 5f       	subi	r16, 0xFF	; 255
     550:	1f 4f       	sbci	r17, 0xFF	; 255
     552:	d8 01       	movw	r26, r16
     554:	01 90       	ld	r0, Z+
			LCD_goto_XY(0,0);
     556:	0d 92       	st	X+, r0
     558:	8a 95       	dec	r24
     55a:	e1 f7       	brne	.-8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     55c:	60 e0       	ldi	r22, 0x00	; 0
			LCD_Write_string(Remaining_Time);
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	e3 de       	rcall	.-570    	; 0x328 <LCD_goto_XY>
     562:	c8 01       	movw	r24, r16
			Run_Number = Laundry_time;
			sprintf(Remaining_Time, "Spin-dry : %02d",Run_Number); // 알람 설정 값 출력
     564:	cc de       	rcall	.-616    	; 0x2fe <LCD_Write_string>
     566:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
     56a:	1f 92       	push	r1
     56c:	8f 93       	push	r24
     56e:	84 e6       	ldi	r24, 0x64	; 100
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	1f 93       	push	r17
     578:	0f 93       	push	r16
			LCD_goto_XY(1,0);
     57a:	a7 d2       	rcall	.+1358   	; 0xaca <sprintf>
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	81 e0       	ldi	r24, 0x01	; 1
			LCD_Write_string(Remaining_Time);
     580:	d3 de       	rcall	.-602    	; 0x328 <LCD_goto_XY>
     582:	c8 01       	movw	r24, r16
     584:	bc de       	rcall	.-648    	; 0x2fe <LCD_Write_string>
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
			
		}
		else
		{
			sprintf(Remaining_Time, "--- SPIN-DRY ---"); // 알람 설정 값 출력
     592:	26 c0       	rjmp	.+76     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     594:	81 e1       	ldi	r24, 0x11	; 17
     596:	e3 e5       	ldi	r30, 0x53	; 83
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	8e 01       	movw	r16, r28
     59c:	0f 5f       	subi	r16, 0xFF	; 255
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	d8 01       	movw	r26, r16
     5a2:	01 90       	ld	r0, Z+
			LCD_goto_XY(0,0);
     5a4:	0d 92       	st	X+, r0
     5a6:	8a 95       	dec	r24
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
			LCD_Write_string(Remaining_Time);
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	bc de       	rcall	.-648    	; 0x328 <LCD_goto_XY>
			Run_Number = Laundry_time;
			sprintf(Remaining_Time, "Spin-dry : %d",Run_Number); // 알람 설정 값 출력
     5b0:	c8 01       	movw	r24, r16
     5b2:	a5 de       	rcall	.-694    	; 0x2fe <LCD_Write_string>
     5b4:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
     5b8:	1f 92       	push	r1
     5ba:	8f 93       	push	r24
     5bc:	84 e7       	ldi	r24, 0x74	; 116
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	1f 93       	push	r17
     5c6:	0f 93       	push	r16
			LCD_goto_XY(1,0);
     5c8:	80 d2       	rcall	.+1280   	; 0xaca <sprintf>
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	81 e0       	ldi	r24, 0x01	; 1
			LCD_Write_string(Remaining_Time);
     5ce:	ac de       	rcall	.-680    	; 0x328 <LCD_goto_XY>
     5d0:	c8 01       	movw	r24, r16
     5d2:	95 de       	rcall	.-726    	; 0x2fe <LCD_Write_string>
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
		}
		
		
		if (Laundry_time == 0)
     5e0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <Laundry_time>
     5e4:	81 11       	cpse	r24, r1
		{
			LCD_Clear();
     5e6:	2b c0       	rjmp	.+86     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
	}
}

void Set_Laundry_Mode_State(uint8_t LaundryMode)
{
	Laundry_Mode = LaundryMode;
     5e8:	54 de       	rcall	.-856    	; 0x292 <LCD_Clear>
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <Laundry_Mode>
			Set_Laundry_Mode_State(End);
		}
		break;
		
		case End:
		sprintf(Remaining_Time, "----- END ------"); // 알람 설정 값 출력
     5f0:	26 c0       	rjmp	.+76     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     5f2:	81 e1       	ldi	r24, 0x11	; 17
     5f4:	e2 e8       	ldi	r30, 0x82	; 130
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	de 01       	movw	r26, r28
     5fa:	11 96       	adiw	r26, 0x01	; 1
     5fc:	01 90       	ld	r0, Z+
		LCD_goto_XY(0,0);
     5fe:	0d 92       	st	X+, r0
     600:	8a 95       	dec	r24
     602:	e1 f7       	brne	.-8      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     604:	60 e0       	ldi	r22, 0x00	; 0
		LCD_Write_string(Remaining_Time);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	8f de       	rcall	.-738    	; 0x328 <LCD_goto_XY>
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
		sprintf(Remaining_Time, "Take Off Laundry"); // 알람 설정 값 출력
     60e:	77 de       	rcall	.-786    	; 0x2fe <LCD_Write_string>
     610:	81 e1       	ldi	r24, 0x11	; 17
     612:	e3 e9       	ldi	r30, 0x93	; 147
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	de 01       	movw	r26, r28
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	01 90       	ld	r0, Z+
     61c:	0d 92       	st	X+, r0
     61e:	8a 95       	dec	r24
		LCD_goto_XY(1,0);
     620:	e1 f7       	brne	.-8      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 de       	rcall	.-768    	; 0x328 <LCD_goto_XY>
		LCD_Write_string(Remaining_Time);
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	68 de       	rcall	.-816    	; 0x2fe <LCD_Write_string>
     62e:	b3 dd       	rcall	.-1178   	; 0x196 <Get_Start_Stop_ButtonState>
		if (Get_Start_Stop_ButtonState())
     630:	88 23       	and	r24, r24
     632:	29 f0       	breq	.+10     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     634:	2e de       	rcall	.-932    	; 0x292 <LCD_Clear>
     636:	80 e0       	ldi	r24, 0x00	; 0
		{
			LCD_Clear();
     638:	74 d0       	rcall	.+232    	; 0x722 <Set_Machine_Mode>
     63a:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <Laundry_Mode>
			Set_Machine_Mode(Auto);
     63e:	cc 59       	subi	r28, 0x9C	; 156
     640:	df 4f       	sbci	r29, 0xFF	; 255
	}
}

void Set_Laundry_Mode_State(uint8_t LaundryMode)
{
	Laundry_Mode = LaundryMode;
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
			Set_Laundry_Mode_State(Ready);
		}
		break;
	}
	
}
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	08 95       	ret

00000656 <__vector_16>:
*/

#include "main.h"

ISR(TIMER0_OVF_vect)
{
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	0b b6       	in	r0, 0x3b	; 59
     662:	0f 92       	push	r0
     664:	2f 93       	push	r18
     666:	3f 93       	push	r19
     668:	4f 93       	push	r20
     66a:	5f 93       	push	r21
     66c:	6f 93       	push	r22
     66e:	7f 93       	push	r23
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31
	Time();
     67c:	5f de       	rcall	.-834    	; 0x33c <Time>
}
     67e:	ff 91       	pop	r31
     680:	ef 91       	pop	r30
     682:	bf 91       	pop	r27
     684:	af 91       	pop	r26
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	7f 91       	pop	r23
     68c:	6f 91       	pop	r22
     68e:	5f 91       	pop	r21
     690:	4f 91       	pop	r20
     692:	3f 91       	pop	r19
     694:	2f 91       	pop	r18
     696:	0f 90       	pop	r0
     698:	0b be       	out	0x3b, r0	; 59
     69a:	0f 90       	pop	r0
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	0f 90       	pop	r0
     6a0:	1f 90       	pop	r1
     6a2:	18 95       	reti

000006a4 <main>:

int main(void)
{
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	c4 56       	subi	r28, 0x64	; 100
     6ae:	d1 09       	sbc	r29, r1
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
	TCCR0 |= (1<<CS02);
     6ba:	83 b7       	in	r24, 0x33	; 51
     6bc:	84 60       	ori	r24, 0x04	; 4
     6be:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
     6c0:	87 b7       	in	r24, 0x37	; 55
     6c2:	81 60       	ori	r24, 0x01	; 1
     6c4:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 256-250-1;
     6c6:	85 e0       	ldi	r24, 0x05	; 5
     6c8:	82 bf       	out	0x32, r24	; 50
	Button_Init();
     6ca:	fe dc       	rcall	.-1540   	; 0xc8 <Button_Init>
	LCD_Init();
     6cc:	eb dd       	rcall	.-1066   	; 0x2a4 <LCD_Init>
	BuzzerInit();
     6ce:	96 dd       	rcall	.-1236   	; 0x1fc <BuzzerInit>
	
	sei();
     6d0:	78 94       	sei
	while (1)
	{
		Mode_Change();
     6d2:	66 dd       	rcall	.-1332   	; 0x1a0 <Mode_Change>
     6d4:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <Machine_Mode>
		switch(Machine_Mode)
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	51 f0       	breq	.+20     	; 0x6f0 <main+0x4c>
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <main+0x44>
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	59 f0       	breq	.+22     	; 0x6f8 <main+0x54>
     6e2:	83 30       	cpi	r24, 0x03	; 3
     6e4:	71 f0       	breq	.+28     	; 0x702 <main+0x5e>
     6e6:	f5 cf       	rjmp	.-22     	; 0x6d2 <main+0x2e>
		{
			uint8_t Dis[100] = {0};
			case Auto:
			Auto_Mode_Action(Auto_Mode);
     6e8:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <Auto_Mode>
     6ec:	37 d0       	rcall	.+110    	; 0x75c <Auto_Mode_Action>
			break;
     6ee:	f1 cf       	rjmp	.-30     	; 0x6d2 <main+0x2e>
			case Manual:
			Manual_Mode_Action(Manual_Mode);
     6f0:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <Manual_Mode>
     6f4:	e1 d0       	rcall	.+450    	; 0x8b8 <Manual_Mode_Action>
			break;
     6f6:	ed cf       	rjmp	.-38     	; 0x6d2 <main+0x2e>
			case Start:
			Display_LaundryTime(Laundry_Mode);
     6f8:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <Laundry_Mode>
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	3c de       	rcall	.-904    	; 0x378 <Display_LaundryTime>
     700:	e8 cf       	rjmp	.-48     	; 0x6d2 <main+0x2e>
			break;
     702:	83 e1       	ldi	r24, 0x13	; 19
			case Stop:
			sprintf(Dis, "------ STOP ------"); // 알람 설정 값 출력
     704:	e4 ea       	ldi	r30, 0xA4	; 164
     706:	f1 e0       	ldi	r31, 0x01	; 1
     708:	de 01       	movw	r26, r28
     70a:	11 96       	adiw	r26, 0x01	; 1
     70c:	01 90       	ld	r0, Z+
     70e:	0d 92       	st	X+, r0
     710:	8a 95       	dec	r24
			LCD_goto_XY(0,0);
     712:	e1 f7       	brne	.-8      	; 0x70c <main+0x68>
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	07 de       	rcall	.-1010   	; 0x328 <LCD_goto_XY>
			LCD_Write_string(Dis);
     71a:	ce 01       	movw	r24, r28
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	ef dd       	rcall	.-1058   	; 0x2fe <LCD_Write_string>
     720:	d8 cf       	rjmp	.-80     	; 0x6d2 <main+0x2e>

00000722 <Set_Machine_Mode>:
			break;
     722:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <Machine_Mode>
	return Rinse_Time * 10;
}

void Set_Dry_Time(uint8_t time)
{
	Dry_Time = time;
     726:	08 95       	ret

00000728 <Get_Machine_Mode>:
     728:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <Machine_Mode>
     72c:	08 95       	ret

0000072e <Get_Wash_Time>:
     72e:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <Wash_Time>
     732:	88 0f       	add	r24, r24
     734:	98 2f       	mov	r25, r24
     736:	99 0f       	add	r25, r25
     738:	99 0f       	add	r25, r25
     73a:	89 0f       	add	r24, r25
     73c:	08 95       	ret

0000073e <Get_Rinse_Time>:
     73e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <Rinse_Time>
     742:	88 0f       	add	r24, r24
     744:	98 2f       	mov	r25, r24
     746:	99 0f       	add	r25, r25
     748:	99 0f       	add	r25, r25
     74a:	89 0f       	add	r24, r25
     74c:	08 95       	ret

0000074e <Get_Dry_TIme>:
}

uint8_t Get_Dry_TIme()
{
	return Dry_Time * 5;
     74e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Dry_Time>
     752:	98 2f       	mov	r25, r24
     754:	99 0f       	add	r25, r25
     756:	99 0f       	add	r25, r25
}
     758:	89 0f       	add	r24, r25
     75a:	08 95       	ret

0000075c <Auto_Mode_Action>:
void Auto_Mode_Action(uint8_t State)
{
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	c4 56       	subi	r28, 0x64	; 100
     768:	d1 09       	sbc	r29, r1
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	18 2f       	mov	r17, r24
	uint8_t Auto_word[100] = {0};
     776:	fe 01       	movw	r30, r28
     778:	31 96       	adiw	r30, 0x01	; 1
     77a:	84 e6       	ldi	r24, 0x64	; 100
     77c:	df 01       	movw	r26, r30
     77e:	1d 92       	st	X+, r1
     780:	8a 95       	dec	r24
     782:	e9 f7       	brne	.-6      	; 0x77e <Auto_Mode_Action+0x22>
	if (Get_State_ButtonState())
     784:	fe dc       	rcall	.-1540   	; 0x182 <Get_State_ButtonState>
     786:	88 23       	and	r24, r24
     788:	99 f0       	breq	.+38     	; 0x7b0 <Auto_Mode_Action+0x54>
	Auto_Mode = AutoMode;
}

uint8_t Get_Auto_Mode_State()
{
	return Auto_Mode;
     78a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <Auto_Mode>
{
	uint8_t Auto_word[100] = {0};
	if (Get_State_ButtonState())
	{
		
		if (Get_Auto_Mode_State() == STANDARD)
     78e:	81 11       	cpse	r24, r1
     790:	05 c0       	rjmp	.+10     	; 0x79c <Auto_Mode_Action+0x40>
static uint8_t Rinse_Time = 0;
static uint8_t Dry_Time = 0;

void Set_Auto_Mode_State(uint8_t AutoMode)
{
	Auto_Mode = AutoMode;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <Auto_Mode>
	{
		
		if (Get_Auto_Mode_State() == STANDARD)
		{
			Set_Auto_Mode_State(QUICK);
			LCD_Clear();
     798:	7c dd       	rcall	.-1288   	; 0x292 <LCD_Clear>
     79a:	0a c0       	rjmp	.+20     	; 0x7b0 <Auto_Mode_Action+0x54>
		}
		else if (Get_Auto_Mode_State() == QUICK)
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	29 f4       	brne	.+10     	; 0x7aa <Auto_Mode_Action+0x4e>
static uint8_t Rinse_Time = 0;
static uint8_t Dry_Time = 0;

void Set_Auto_Mode_State(uint8_t AutoMode)
{
	Auto_Mode = AutoMode;
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <Auto_Mode>
			LCD_Clear();
		}
		else if (Get_Auto_Mode_State() == QUICK)
		{
			Set_Auto_Mode_State(WOOL);
			LCD_Clear();
     7a6:	75 dd       	rcall	.-1302   	; 0x292 <LCD_Clear>
static uint8_t Rinse_Time = 0;
static uint8_t Dry_Time = 0;

void Set_Auto_Mode_State(uint8_t AutoMode)
{
	Auto_Mode = AutoMode;
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <Auto_Mode_Action+0x54>
     7aa:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <Auto_Mode>
			LCD_Clear();
		}
		else
		{
			Set_Auto_Mode_State(STANDARD);
			LCD_Clear();
     7ae:	71 dd       	rcall	.-1310   	; 0x292 <LCD_Clear>
		}
	}
	switch(State)
     7b0:	11 30       	cpi	r17, 0x01	; 1
     7b2:	59 f1       	breq	.+86     	; 0x80a <Auto_Mode_Action+0xae>
     7b4:	20 f0       	brcs	.+8      	; 0x7be <Auto_Mode_Action+0x62>
     7b6:	12 30       	cpi	r17, 0x02	; 2
     7b8:	09 f4       	brne	.+2      	; 0x7bc <Auto_Mode_Action+0x60>
     7ba:	4d c0       	rjmp	.+154    	; 0x856 <Auto_Mode_Action+0xfa>
     7bc:	72 c0       	rjmp	.+228    	; 0x8a2 <Auto_Mode_Action+0x146>
	{
		case STANDARD:
		
		sprintf(Auto_word, "Mode : Standard"); // 알람 설정 값 출력
     7be:	80 e1       	ldi	r24, 0x10	; 16
     7c0:	e7 eb       	ldi	r30, 0xB7	; 183
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	de 01       	movw	r26, r28
     7c6:	11 96       	adiw	r26, 0x01	; 1
     7c8:	01 90       	ld	r0, Z+
     7ca:	0d 92       	st	X+, r0
     7cc:	8a 95       	dec	r24
		LCD_goto_XY(0,0);
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <Auto_Mode_Action+0x6c>
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	80 e0       	ldi	r24, 0x00	; 0
		LCD_Write_string(Auto_word);
     7d4:	a9 dd       	rcall	.-1198   	; 0x328 <LCD_goto_XY>
     7d6:	ce 01       	movw	r24, r28
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	91 dd       	rcall	.-1246   	; 0x2fe <LCD_Write_string>
		sprintf(Auto_word, "W:3 R:3 D:3"); // 알람 설정 값 출력
     7dc:	8c e0       	ldi	r24, 0x0C	; 12
     7de:	e7 ec       	ldi	r30, 0xC7	; 199
     7e0:	f1 e0       	ldi	r31, 0x01	; 1
     7e2:	de 01       	movw	r26, r28
     7e4:	11 96       	adiw	r26, 0x01	; 1
     7e6:	01 90       	ld	r0, Z+
     7e8:	0d 92       	st	X+, r0
     7ea:	8a 95       	dec	r24
		LCD_goto_XY(1,0);
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <Auto_Mode_Action+0x8a>
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	9a dd       	rcall	.-1228   	; 0x328 <LCD_goto_XY>
		LCD_Write_string(Auto_word);
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	82 dd       	rcall	.-1276   	; 0x2fe <LCD_Write_string>
     7fa:	83 e0       	ldi	r24, 0x03	; 3
	return Machine_Mode;
}

void Set_Wash_Time(uint8_t time)
{
	Wash_Time = time;
     7fc:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Wash_Time>
     800:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <Rinse_Time>
	return Wash_Time * 10;
}

void Set_Rinse_Time(uint8_t time)
{
	Rinse_Time = time;
     804:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Dry_Time>
	return Rinse_Time * 10;
}

void Set_Dry_Time(uint8_t time)
{
	Dry_Time = time;
     808:	4c c0       	rjmp	.+152    	; 0x8a2 <Auto_Mode_Action+0x146>
     80a:	8d e0       	ldi	r24, 0x0D	; 13
		
		break;
		
		case QUICK:
		
		sprintf(Auto_word, "Mode : Quick"); // 알람 설정 값 출력
     80c:	e3 ed       	ldi	r30, 0xD3	; 211
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	de 01       	movw	r26, r28
     812:	11 96       	adiw	r26, 0x01	; 1
     814:	01 90       	ld	r0, Z+
     816:	0d 92       	st	X+, r0
     818:	8a 95       	dec	r24
		LCD_goto_XY(0,0);
     81a:	e1 f7       	brne	.-8      	; 0x814 <Auto_Mode_Action+0xb8>
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	83 dd       	rcall	.-1274   	; 0x328 <LCD_goto_XY>
		LCD_Write_string(Auto_word);
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	6b dd       	rcall	.-1322   	; 0x2fe <LCD_Write_string>
     828:	8c e0       	ldi	r24, 0x0C	; 12
		sprintf(Auto_word, "W:2 R:2 D:2"); // 알람 설정 값 출력
     82a:	e0 ee       	ldi	r30, 0xE0	; 224
     82c:	f1 e0       	ldi	r31, 0x01	; 1
     82e:	de 01       	movw	r26, r28
     830:	11 96       	adiw	r26, 0x01	; 1
     832:	01 90       	ld	r0, Z+
     834:	0d 92       	st	X+, r0
     836:	8a 95       	dec	r24
		LCD_goto_XY(1,0);
     838:	e1 f7       	brne	.-8      	; 0x832 <Auto_Mode_Action+0xd6>
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	74 dd       	rcall	.-1304   	; 0x328 <LCD_goto_XY>
		LCD_Write_string(Auto_word);
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	5c dd       	rcall	.-1352   	; 0x2fe <LCD_Write_string>
     846:	82 e0       	ldi	r24, 0x02	; 2
	return Machine_Mode;
}

void Set_Wash_Time(uint8_t time)
{
	Wash_Time = time;
     848:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Wash_Time>
     84c:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <Rinse_Time>
	return Wash_Time * 10;
}

void Set_Rinse_Time(uint8_t time)
{
	Rinse_Time = time;
     850:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Dry_Time>
	return Rinse_Time * 10;
}

void Set_Dry_Time(uint8_t time)
{
	Dry_Time = time;
     854:	26 c0       	rjmp	.+76     	; 0x8a2 <Auto_Mode_Action+0x146>
		
		break;
		
		case WOOL:
		
		sprintf(Auto_word, "Mode : Wool"); // 알람 설정 값 출력
     856:	8c e0       	ldi	r24, 0x0C	; 12
     858:	ec ee       	ldi	r30, 0xEC	; 236
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	de 01       	movw	r26, r28
     85e:	11 96       	adiw	r26, 0x01	; 1
     860:	01 90       	ld	r0, Z+
     862:	0d 92       	st	X+, r0
     864:	8a 95       	dec	r24
		LCD_goto_XY(0,0);
     866:	e1 f7       	brne	.-8      	; 0x860 <Auto_Mode_Action+0x104>
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	5d dd       	rcall	.-1350   	; 0x328 <LCD_goto_XY>
		LCD_Write_string(Auto_word);
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	45 dd       	rcall	.-1398   	; 0x2fe <LCD_Write_string>
		sprintf(Auto_word, "W:3 R:3 D:1"); // 알람 설정 값 출력
     874:	8c e0       	ldi	r24, 0x0C	; 12
     876:	e8 ef       	ldi	r30, 0xF8	; 248
     878:	f1 e0       	ldi	r31, 0x01	; 1
     87a:	de 01       	movw	r26, r28
     87c:	11 96       	adiw	r26, 0x01	; 1
     87e:	01 90       	ld	r0, Z+
     880:	0d 92       	st	X+, r0
     882:	8a 95       	dec	r24
		LCD_goto_XY(1,0);
     884:	e1 f7       	brne	.-8      	; 0x87e <Auto_Mode_Action+0x122>
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	4e dd       	rcall	.-1380   	; 0x328 <LCD_goto_XY>
		LCD_Write_string(Auto_word);
     88c:	ce 01       	movw	r24, r28
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	36 dd       	rcall	.-1428   	; 0x2fe <LCD_Write_string>
     892:	83 e0       	ldi	r24, 0x03	; 3
	return Machine_Mode;
}

void Set_Wash_Time(uint8_t time)
{
	Wash_Time = time;
     894:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Wash_Time>
     898:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <Rinse_Time>
	return Wash_Time * 10;
}

void Set_Rinse_Time(uint8_t time)
{
	Rinse_Time = time;
     89c:	81 e0       	ldi	r24, 0x01	; 1
	return Rinse_Time * 10;
}

void Set_Dry_Time(uint8_t time)
{
	Dry_Time = time;
     89e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Dry_Time>
     8a2:	cc 59       	subi	r28, 0x9C	; 156
		Set_Rinse_Time(3);
		Set_Dry_Time(1);
	
		break;
	}
}
     8a4:	df 4f       	sbci	r29, 0xFF	; 255
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	08 95       	ret

000008b8 <Manual_Mode_Action>:
     8b8:	0f 93       	push	r16

void Manual_Mode_Action(uint8_t State)
{
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	c4 56       	subi	r28, 0x64	; 100
     8c6:	d1 09       	sbc	r29, r1
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	18 2f       	mov	r17, r24
	uint8_t Manual_word[100] = {0};
     8d4:	fe 01       	movw	r30, r28
     8d6:	31 96       	adiw	r30, 0x01	; 1
     8d8:	84 e6       	ldi	r24, 0x64	; 100
     8da:	df 01       	movw	r26, r30
     8dc:	1d 92       	st	X+, r1
     8de:	8a 95       	dec	r24
     8e0:	e9 f7       	brne	.-6      	; 0x8dc <Manual_Mode_Action+0x24>
	static uint8_t Wash_Num = 0;
	static uint8_t Rinse_Num = 0;
	static uint8_t Dry_Num = 0;

	if (Get_State_ButtonState())
     8e2:	4f dc       	rcall	.-1890   	; 0x182 <Get_State_ButtonState>
     8e4:	88 23       	and	r24, r24
     8e6:	89 f0       	breq	.+34     	; 0x90a <Manual_Mode_Action+0x52>
	{
		LCD_Clear();
     8e8:	d4 dc       	rcall	.-1624   	; 0x292 <LCD_Clear>
     8ea:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <Manual_Mode>
}


uint8_t Get_Manual_Mode_State()
{
	return Manual_Mode;
     8ee:	81 11       	cpse	r24, r1
	static uint8_t Dry_Num = 0;

	if (Get_State_ButtonState())
	{
		LCD_Clear();
		if (Get_Manual_Mode_State() == WASH)
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <Manual_Mode_Action+0x42>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
}


void Set_Manual_Mode_State(uint8_t ManualMode)
{
	Manual_Mode = ManualMode;
     8f4:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <Manual_Mode>
     8f8:	08 c0       	rjmp	.+16     	; 0x90a <Manual_Mode_Action+0x52>
     8fa:	81 30       	cpi	r24, 0x01	; 1
		LCD_Clear();
		if (Get_Manual_Mode_State() == WASH)
		{
			Set_Manual_Mode_State(RINSE);
		}
		else if (Get_Manual_Mode_State() == RINSE)
     8fc:	21 f4       	brne	.+8      	; 0x906 <Manual_Mode_Action+0x4e>
     8fe:	82 e0       	ldi	r24, 0x02	; 2
}


void Set_Manual_Mode_State(uint8_t ManualMode)
{
	Manual_Mode = ManualMode;
     900:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <Manual_Mode>
     904:	02 c0       	rjmp	.+4      	; 0x90a <Manual_Mode_Action+0x52>
     906:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <Manual_Mode>
     90a:	11 30       	cpi	r17, 0x01	; 1
		else
		{
			Set_Manual_Mode_State(WASH);
		}
	}
	switch(State)
     90c:	09 f4       	brne	.+2      	; 0x910 <Manual_Mode_Action+0x58>
     90e:	40 c0       	rjmp	.+128    	; 0x990 <Manual_Mode_Action+0xd8>
     910:	20 f0       	brcs	.+8      	; 0x91a <Manual_Mode_Action+0x62>
     912:	12 30       	cpi	r17, 0x02	; 2
     914:	09 f4       	brne	.+2      	; 0x918 <Manual_Mode_Action+0x60>
     916:	77 c0       	rjmp	.+238    	; 0xa06 <Manual_Mode_Action+0x14e>
     918:	af c0       	rjmp	.+350    	; 0xa78 <Manual_Mode_Action+0x1c0>
     91a:	80 e1       	ldi	r24, 0x10	; 16
	{
		case WASH:
		
		sprintf(Manual_word, "Mode : Wash Set"); // 알람 설정 값 출력
     91c:	e4 e0       	ldi	r30, 0x04	; 4
     91e:	f2 e0       	ldi	r31, 0x02	; 2
     920:	de 01       	movw	r26, r28
     922:	11 96       	adiw	r26, 0x01	; 1
     924:	01 90       	ld	r0, Z+
     926:	0d 92       	st	X+, r0
     928:	8a 95       	dec	r24
     92a:	e1 f7       	brne	.-8      	; 0x924 <Manual_Mode_Action+0x6c>
     92c:	60 e0       	ldi	r22, 0x00	; 0
		LCD_goto_XY(0,0);
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	fb dc       	rcall	.-1546   	; 0x328 <LCD_goto_XY>
     932:	ce 01       	movw	r24, r28
		LCD_Write_string(Manual_word);
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	e3 dc       	rcall	.-1594   	; 0x2fe <LCD_Write_string>
     938:	29 dc       	rcall	.-1966   	; 0x18c <Get_Manual_Timeup_ButtonState>
		if (Get_Manual_Timeup_ButtonState())
     93a:	88 23       	and	r24, r24
     93c:	09 f4       	brne	.+2      	; 0x940 <Manual_Mode_Action+0x88>
     93e:	9c c0       	rjmp	.+312    	; 0xa78 <Manual_Mode_Action+0x1c0>
     940:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Wash_Num.2064>
		{
			Wash_Num++;
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	18 f4       	brcc	.+6      	; 0x950 <Manual_Mode_Action+0x98>
			if (Wash_Num > 3)
     94a:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <Wash_Num.2064>
		sprintf(Manual_word, "Mode : Wash Set"); // 알람 설정 값 출력
		LCD_goto_XY(0,0);
		LCD_Write_string(Manual_word);
		if (Get_Manual_Timeup_ButtonState())
		{
			Wash_Num++;
     94e:	02 c0       	rjmp	.+4      	; 0x954 <Manual_Mode_Action+0x9c>
     950:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <Wash_Num.2064>
			if (Wash_Num > 3)
			{
				Wash_Num = 0;
     954:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Wash_Num.2064>
			}
		
			sprintf(Manual_word, "Wash Time : %02d",Wash_Num); // 알람 설정 값 출력
     958:	1f 92       	push	r1
     95a:	8f 93       	push	r24
     95c:	84 e1       	ldi	r24, 0x14	; 20
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	9f 93       	push	r25
     962:	8f 93       	push	r24
     964:	8e 01       	movw	r16, r28
     966:	0f 5f       	subi	r16, 0xFF	; 255
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	1f 93       	push	r17
     96c:	0f 93       	push	r16
     96e:	ad d0       	rcall	.+346    	; 0xaca <sprintf>
     970:	60 e0       	ldi	r22, 0x00	; 0
			LCD_goto_XY(1,0);
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	d9 dc       	rcall	.-1614   	; 0x328 <LCD_goto_XY>
     976:	c8 01       	movw	r24, r16
     978:	c2 dc       	rcall	.-1660   	; 0x2fe <LCD_Write_string>
			LCD_Write_string(Manual_word);
     97a:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Wash_Num.2064>
     97e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Wash_Time>
	return Machine_Mode;
}

void Set_Wash_Time(uint8_t time)
{
	Wash_Time = time;
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	74 c0       	rjmp	.+232    	; 0xa78 <Manual_Mode_Action+0x1c0>
     990:	81 e1       	ldi	r24, 0x11	; 17
     992:	e5 e2       	ldi	r30, 0x25	; 37
     994:	f2 e0       	ldi	r31, 0x02	; 2
		
		break;
		
		case RINSE:
		
		sprintf(Manual_word, "Mode : Rinse Set"); // 알람 설정 값 출력
     996:	de 01       	movw	r26, r28
     998:	11 96       	adiw	r26, 0x01	; 1
     99a:	01 90       	ld	r0, Z+
     99c:	0d 92       	st	X+, r0
     99e:	8a 95       	dec	r24
     9a0:	e1 f7       	brne	.-8      	; 0x99a <Manual_Mode_Action+0xe2>
     9a2:	60 e0       	ldi	r22, 0x00	; 0
		LCD_goto_XY(0,0);
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	c0 dc       	rcall	.-1664   	; 0x328 <LCD_goto_XY>
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
		LCD_Write_string(Manual_word);
     9ac:	a8 dc       	rcall	.-1712   	; 0x2fe <LCD_Write_string>
     9ae:	ee db       	rcall	.-2084   	; 0x18c <Get_Manual_Timeup_ButtonState>
     9b0:	88 23       	and	r24, r24
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <Manual_Mode_Action+0xfe>
		if (Get_Manual_Timeup_ButtonState())
     9b4:	61 c0       	rjmp	.+194    	; 0xa78 <Manual_Mode_Action+0x1c0>
     9b6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Rinse_Num.2065>
     9ba:	8f 5f       	subi	r24, 0xFF	; 255
     9bc:	84 30       	cpi	r24, 0x04	; 4
		{
			Rinse_Num++;
     9be:	18 f4       	brcc	.+6      	; 0x9c6 <Manual_Mode_Action+0x10e>
     9c0:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Rinse_Num.2065>
			if (Rinse_Num > 3)
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <Manual_Mode_Action+0x112>
     9c6:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <Rinse_Num.2065>
		sprintf(Manual_word, "Mode : Rinse Set"); // 알람 설정 값 출력
		LCD_goto_XY(0,0);
		LCD_Write_string(Manual_word);
		if (Get_Manual_Timeup_ButtonState())
		{
			Rinse_Num++;
     9ca:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Rinse_Num.2065>
			if (Rinse_Num > 3)
			{
				Rinse_Num = 0;
     9ce:	1f 92       	push	r1
     9d0:	8f 93       	push	r24
			}
			sprintf(Manual_word, "Rinse Time : %02d",Rinse_Num); // 알람 설정 값 출력
     9d2:	86 e3       	ldi	r24, 0x36	; 54
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	8e 01       	movw	r16, r28
     9dc:	0f 5f       	subi	r16, 0xFF	; 255
     9de:	1f 4f       	sbci	r17, 0xFF	; 255
     9e0:	1f 93       	push	r17
     9e2:	0f 93       	push	r16
     9e4:	72 d0       	rcall	.+228    	; 0xaca <sprintf>
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	81 e0       	ldi	r24, 0x01	; 1
			LCD_goto_XY(1,0);
     9ea:	9e dc       	rcall	.-1732   	; 0x328 <LCD_goto_XY>
     9ec:	c8 01       	movw	r24, r16
     9ee:	87 dc       	rcall	.-1778   	; 0x2fe <LCD_Write_string>
     9f0:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Rinse_Num.2065>
			LCD_Write_string(Manual_word);
     9f4:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <Rinse_Time>
	return Wash_Time * 10;
}

void Set_Rinse_Time(uint8_t time)
{
	Rinse_Time = time;
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	39 c0       	rjmp	.+114    	; 0xa78 <Manual_Mode_Action+0x1c0>
     a06:	84 e1       	ldi	r24, 0x14	; 20
     a08:	e8 e4       	ldi	r30, 0x48	; 72
     a0a:	f2 e0       	ldi	r31, 0x02	; 2
		
		break;
		
		case SPIN_DRY:
		
		sprintf(Manual_word, "Mode : Spin-dry Set"); // 알람 설정 값 출력
     a0c:	de 01       	movw	r26, r28
     a0e:	11 96       	adiw	r26, 0x01	; 1
     a10:	01 90       	ld	r0, Z+
     a12:	0d 92       	st	X+, r0
     a14:	8a 95       	dec	r24
     a16:	e1 f7       	brne	.-8      	; 0xa10 <Manual_Mode_Action+0x158>
     a18:	60 e0       	ldi	r22, 0x00	; 0
		LCD_goto_XY(0,0);
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	85 dc       	rcall	.-1782   	; 0x328 <LCD_goto_XY>
     a1e:	ce 01       	movw	r24, r28
     a20:	01 96       	adiw	r24, 0x01	; 1
		LCD_Write_string(Manual_word);
     a22:	6d dc       	rcall	.-1830   	; 0x2fe <LCD_Write_string>
     a24:	b3 db       	rcall	.-2202   	; 0x18c <Get_Manual_Timeup_ButtonState>
     a26:	88 23       	and	r24, r24
     a28:	39 f1       	breq	.+78     	; 0xa78 <Manual_Mode_Action+0x1c0>
		if (Get_Manual_Timeup_ButtonState())
     a2a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Dry_Num.2066>
     a2e:	8f 5f       	subi	r24, 0xFF	; 255
     a30:	84 30       	cpi	r24, 0x04	; 4
		{
			Dry_Num++;
     a32:	18 f4       	brcc	.+6      	; 0xa3a <Manual_Mode_Action+0x182>
     a34:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <Dry_Num.2066>
			if (Dry_Num > 3)
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <Manual_Mode_Action+0x186>
     a3a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <Dry_Num.2066>
		sprintf(Manual_word, "Mode : Spin-dry Set"); // 알람 설정 값 출력
		LCD_goto_XY(0,0);
		LCD_Write_string(Manual_word);
		if (Get_Manual_Timeup_ButtonState())
		{
			Dry_Num++;
     a3e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Dry_Num.2066>
			if (Dry_Num > 3)
			{
				Dry_Num = 0;
			}
			sprintf(Manual_word, "Dry Time : %02d",Dry_Num); // 알람 설정 값 출력
     a42:	1f 92       	push	r1
     a44:	8f 93       	push	r24
     a46:	8c e5       	ldi	r24, 0x5C	; 92
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	9f 93       	push	r25
     a4c:	8f 93       	push	r24
     a4e:	8e 01       	movw	r16, r28
     a50:	0f 5f       	subi	r16, 0xFF	; 255
     a52:	1f 4f       	sbci	r17, 0xFF	; 255
     a54:	1f 93       	push	r17
     a56:	0f 93       	push	r16
     a58:	38 d0       	rcall	.+112    	; 0xaca <sprintf>
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	81 e0       	ldi	r24, 0x01	; 1
			LCD_goto_XY(1,0);
     a5e:	64 dc       	rcall	.-1848   	; 0x328 <LCD_goto_XY>
     a60:	c8 01       	movw	r24, r16
     a62:	4d dc       	rcall	.-1894   	; 0x2fe <LCD_Write_string>
     a64:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Dry_Num.2066>
			LCD_Write_string(Manual_word);
     a68:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Dry_Time>
	return Rinse_Time * 10;
}

void Set_Dry_Time(uint8_t time)
{
	Dry_Time = time;
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	cc 59       	subi	r28, 0x9C	; 156
     a7a:	df 4f       	sbci	r29, 0xFF	; 255
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
			
		}
	
		break;
	}
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <Get_Millis>:

static uint32_t millisCount=0; 

uint32_t Get_Millis() 
{
	return millisCount;  // milliscount로 반환
     a90:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <millisCount>
     a94:	70 91 7c 02 	lds	r23, 0x027C	; 0x80027c <millisCount+0x1>
     a98:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <millisCount+0x2>
     a9c:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <millisCount+0x3>
}
     aa0:	08 95       	ret

00000aa2 <Inc_Millis>:

void Inc_Millis() 
{
	millisCount++; // milliscount 추가 (1ms)
     aa2:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <millisCount>
     aa6:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <millisCount+0x1>
     aaa:	a0 91 7d 02 	lds	r26, 0x027D	; 0x80027d <millisCount+0x2>
     aae:	b0 91 7e 02 	lds	r27, 0x027E	; 0x80027e <millisCount+0x3>
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	a1 1d       	adc	r26, r1
     ab6:	b1 1d       	adc	r27, r1
     ab8:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <millisCount>
     abc:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <millisCount+0x1>
     ac0:	a0 93 7d 02 	sts	0x027D, r26	; 0x80027d <millisCount+0x2>
     ac4:	b0 93 7e 02 	sts	0x027E, r27	; 0x80027e <millisCount+0x3>
     ac8:	08 95       	ret

00000aca <sprintf>:
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	2e 97       	sbiw	r28, 0x0e	; 14
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	0d 89       	ldd	r16, Y+21	; 0x15
     ae4:	1e 89       	ldd	r17, Y+22	; 0x16
     ae6:	86 e0       	ldi	r24, 0x06	; 6
     ae8:	8c 83       	std	Y+4, r24	; 0x04
     aea:	1a 83       	std	Y+2, r17	; 0x02
     aec:	09 83       	std	Y+1, r16	; 0x01
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	9f e7       	ldi	r25, 0x7F	; 127
     af2:	9e 83       	std	Y+6, r25	; 0x06
     af4:	8d 83       	std	Y+5, r24	; 0x05
     af6:	ae 01       	movw	r20, r28
     af8:	47 5e       	subi	r20, 0xE7	; 231
     afa:	5f 4f       	sbci	r21, 0xFF	; 255
     afc:	6f 89       	ldd	r22, Y+23	; 0x17
     afe:	78 8d       	ldd	r23, Y+24	; 0x18
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	10 d0       	rcall	.+32     	; 0xb26 <vfprintf>
     b06:	ef 81       	ldd	r30, Y+7	; 0x07
     b08:	f8 85       	ldd	r31, Y+8	; 0x08
     b0a:	e0 0f       	add	r30, r16
     b0c:	f1 1f       	adc	r31, r17
     b0e:	10 82       	st	Z, r1
     b10:	2e 96       	adiw	r28, 0x0e	; 14
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	08 95       	ret

00000b26 <vfprintf>:
     b26:	2f 92       	push	r2
     b28:	3f 92       	push	r3
     b2a:	4f 92       	push	r4
     b2c:	5f 92       	push	r5
     b2e:	6f 92       	push	r6
     b30:	7f 92       	push	r7
     b32:	8f 92       	push	r8
     b34:	9f 92       	push	r9
     b36:	af 92       	push	r10
     b38:	bf 92       	push	r11
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2b 97       	sbiw	r28, 0x0b	; 11
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	6c 01       	movw	r12, r24
     b5c:	7b 01       	movw	r14, r22
     b5e:	8a 01       	movw	r16, r20
     b60:	fc 01       	movw	r30, r24
     b62:	17 82       	std	Z+7, r1	; 0x07
     b64:	16 82       	std	Z+6, r1	; 0x06
     b66:	83 81       	ldd	r24, Z+3	; 0x03
     b68:	81 ff       	sbrs	r24, 1
     b6a:	bf c1       	rjmp	.+894    	; 0xeea <vfprintf+0x3c4>
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	3c 01       	movw	r6, r24
     b72:	f6 01       	movw	r30, r12
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	f7 01       	movw	r30, r14
     b78:	93 fd       	sbrc	r25, 3
     b7a:	85 91       	lpm	r24, Z+
     b7c:	93 ff       	sbrs	r25, 3
     b7e:	81 91       	ld	r24, Z+
     b80:	7f 01       	movw	r14, r30
     b82:	88 23       	and	r24, r24
     b84:	09 f4       	brne	.+2      	; 0xb88 <vfprintf+0x62>
     b86:	ad c1       	rjmp	.+858    	; 0xee2 <vfprintf+0x3bc>
     b88:	85 32       	cpi	r24, 0x25	; 37
     b8a:	39 f4       	brne	.+14     	; 0xb9a <vfprintf+0x74>
     b8c:	93 fd       	sbrc	r25, 3
     b8e:	85 91       	lpm	r24, Z+
     b90:	93 ff       	sbrs	r25, 3
     b92:	81 91       	ld	r24, Z+
     b94:	7f 01       	movw	r14, r30
     b96:	85 32       	cpi	r24, 0x25	; 37
     b98:	21 f4       	brne	.+8      	; 0xba2 <vfprintf+0x7c>
     b9a:	b6 01       	movw	r22, r12
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	d6 d1       	rcall	.+940    	; 0xf4c <fputc>
     ba0:	e8 cf       	rjmp	.-48     	; 0xb72 <vfprintf+0x4c>
     ba2:	91 2c       	mov	r9, r1
     ba4:	21 2c       	mov	r2, r1
     ba6:	31 2c       	mov	r3, r1
     ba8:	ff e1       	ldi	r31, 0x1F	; 31
     baa:	f3 15       	cp	r31, r3
     bac:	d8 f0       	brcs	.+54     	; 0xbe4 <vfprintf+0xbe>
     bae:	8b 32       	cpi	r24, 0x2B	; 43
     bb0:	79 f0       	breq	.+30     	; 0xbd0 <vfprintf+0xaa>
     bb2:	38 f4       	brcc	.+14     	; 0xbc2 <vfprintf+0x9c>
     bb4:	80 32       	cpi	r24, 0x20	; 32
     bb6:	79 f0       	breq	.+30     	; 0xbd6 <vfprintf+0xb0>
     bb8:	83 32       	cpi	r24, 0x23	; 35
     bba:	a1 f4       	brne	.+40     	; 0xbe4 <vfprintf+0xbe>
     bbc:	23 2d       	mov	r18, r3
     bbe:	20 61       	ori	r18, 0x10	; 16
     bc0:	1d c0       	rjmp	.+58     	; 0xbfc <vfprintf+0xd6>
     bc2:	8d 32       	cpi	r24, 0x2D	; 45
     bc4:	61 f0       	breq	.+24     	; 0xbde <vfprintf+0xb8>
     bc6:	80 33       	cpi	r24, 0x30	; 48
     bc8:	69 f4       	brne	.+26     	; 0xbe4 <vfprintf+0xbe>
     bca:	23 2d       	mov	r18, r3
     bcc:	21 60       	ori	r18, 0x01	; 1
     bce:	16 c0       	rjmp	.+44     	; 0xbfc <vfprintf+0xd6>
     bd0:	83 2d       	mov	r24, r3
     bd2:	82 60       	ori	r24, 0x02	; 2
     bd4:	38 2e       	mov	r3, r24
     bd6:	e3 2d       	mov	r30, r3
     bd8:	e4 60       	ori	r30, 0x04	; 4
     bda:	3e 2e       	mov	r3, r30
     bdc:	2a c0       	rjmp	.+84     	; 0xc32 <vfprintf+0x10c>
     bde:	f3 2d       	mov	r31, r3
     be0:	f8 60       	ori	r31, 0x08	; 8
     be2:	1d c0       	rjmp	.+58     	; 0xc1e <vfprintf+0xf8>
     be4:	37 fc       	sbrc	r3, 7
     be6:	2d c0       	rjmp	.+90     	; 0xc42 <vfprintf+0x11c>
     be8:	20 ed       	ldi	r18, 0xD0	; 208
     bea:	28 0f       	add	r18, r24
     bec:	2a 30       	cpi	r18, 0x0A	; 10
     bee:	40 f0       	brcs	.+16     	; 0xc00 <vfprintf+0xda>
     bf0:	8e 32       	cpi	r24, 0x2E	; 46
     bf2:	b9 f4       	brne	.+46     	; 0xc22 <vfprintf+0xfc>
     bf4:	36 fc       	sbrc	r3, 6
     bf6:	75 c1       	rjmp	.+746    	; 0xee2 <vfprintf+0x3bc>
     bf8:	23 2d       	mov	r18, r3
     bfa:	20 64       	ori	r18, 0x40	; 64
     bfc:	32 2e       	mov	r3, r18
     bfe:	19 c0       	rjmp	.+50     	; 0xc32 <vfprintf+0x10c>
     c00:	36 fe       	sbrs	r3, 6
     c02:	06 c0       	rjmp	.+12     	; 0xc10 <vfprintf+0xea>
     c04:	8a e0       	ldi	r24, 0x0A	; 10
     c06:	98 9e       	mul	r9, r24
     c08:	20 0d       	add	r18, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	92 2e       	mov	r9, r18
     c0e:	11 c0       	rjmp	.+34     	; 0xc32 <vfprintf+0x10c>
     c10:	ea e0       	ldi	r30, 0x0A	; 10
     c12:	2e 9e       	mul	r2, r30
     c14:	20 0d       	add	r18, r0
     c16:	11 24       	eor	r1, r1
     c18:	22 2e       	mov	r2, r18
     c1a:	f3 2d       	mov	r31, r3
     c1c:	f0 62       	ori	r31, 0x20	; 32
     c1e:	3f 2e       	mov	r3, r31
     c20:	08 c0       	rjmp	.+16     	; 0xc32 <vfprintf+0x10c>
     c22:	8c 36       	cpi	r24, 0x6C	; 108
     c24:	21 f4       	brne	.+8      	; 0xc2e <vfprintf+0x108>
     c26:	83 2d       	mov	r24, r3
     c28:	80 68       	ori	r24, 0x80	; 128
     c2a:	38 2e       	mov	r3, r24
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <vfprintf+0x10c>
     c2e:	88 36       	cpi	r24, 0x68	; 104
     c30:	41 f4       	brne	.+16     	; 0xc42 <vfprintf+0x11c>
     c32:	f7 01       	movw	r30, r14
     c34:	93 fd       	sbrc	r25, 3
     c36:	85 91       	lpm	r24, Z+
     c38:	93 ff       	sbrs	r25, 3
     c3a:	81 91       	ld	r24, Z+
     c3c:	7f 01       	movw	r14, r30
     c3e:	81 11       	cpse	r24, r1
     c40:	b3 cf       	rjmp	.-154    	; 0xba8 <vfprintf+0x82>
     c42:	98 2f       	mov	r25, r24
     c44:	9f 7d       	andi	r25, 0xDF	; 223
     c46:	95 54       	subi	r25, 0x45	; 69
     c48:	93 30       	cpi	r25, 0x03	; 3
     c4a:	28 f4       	brcc	.+10     	; 0xc56 <vfprintf+0x130>
     c4c:	0c 5f       	subi	r16, 0xFC	; 252
     c4e:	1f 4f       	sbci	r17, 0xFF	; 255
     c50:	9f e3       	ldi	r25, 0x3F	; 63
     c52:	99 83       	std	Y+1, r25	; 0x01
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <vfprintf+0x14a>
     c56:	83 36       	cpi	r24, 0x63	; 99
     c58:	31 f0       	breq	.+12     	; 0xc66 <vfprintf+0x140>
     c5a:	83 37       	cpi	r24, 0x73	; 115
     c5c:	71 f0       	breq	.+28     	; 0xc7a <vfprintf+0x154>
     c5e:	83 35       	cpi	r24, 0x53	; 83
     c60:	09 f0       	breq	.+2      	; 0xc64 <vfprintf+0x13e>
     c62:	55 c0       	rjmp	.+170    	; 0xd0e <vfprintf+0x1e8>
     c64:	20 c0       	rjmp	.+64     	; 0xca6 <vfprintf+0x180>
     c66:	f8 01       	movw	r30, r16
     c68:	80 81       	ld	r24, Z
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0e 5f       	subi	r16, 0xFE	; 254
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255
     c70:	88 24       	eor	r8, r8
     c72:	83 94       	inc	r8
     c74:	91 2c       	mov	r9, r1
     c76:	53 01       	movw	r10, r6
     c78:	12 c0       	rjmp	.+36     	; 0xc9e <vfprintf+0x178>
     c7a:	28 01       	movw	r4, r16
     c7c:	f2 e0       	ldi	r31, 0x02	; 2
     c7e:	4f 0e       	add	r4, r31
     c80:	51 1c       	adc	r5, r1
     c82:	f8 01       	movw	r30, r16
     c84:	a0 80       	ld	r10, Z
     c86:	b1 80       	ldd	r11, Z+1	; 0x01
     c88:	36 fe       	sbrs	r3, 6
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <vfprintf+0x16c>
     c8c:	69 2d       	mov	r22, r9
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <vfprintf+0x170>
     c92:	6f ef       	ldi	r22, 0xFF	; 255
     c94:	7f ef       	ldi	r23, 0xFF	; 255
     c96:	c5 01       	movw	r24, r10
     c98:	4e d1       	rcall	.+668    	; 0xf36 <strnlen>
     c9a:	4c 01       	movw	r8, r24
     c9c:	82 01       	movw	r16, r4
     c9e:	f3 2d       	mov	r31, r3
     ca0:	ff 77       	andi	r31, 0x7F	; 127
     ca2:	3f 2e       	mov	r3, r31
     ca4:	15 c0       	rjmp	.+42     	; 0xcd0 <vfprintf+0x1aa>
     ca6:	28 01       	movw	r4, r16
     ca8:	22 e0       	ldi	r18, 0x02	; 2
     caa:	42 0e       	add	r4, r18
     cac:	51 1c       	adc	r5, r1
     cae:	f8 01       	movw	r30, r16
     cb0:	a0 80       	ld	r10, Z
     cb2:	b1 80       	ldd	r11, Z+1	; 0x01
     cb4:	36 fe       	sbrs	r3, 6
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <vfprintf+0x198>
     cb8:	69 2d       	mov	r22, r9
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <vfprintf+0x19c>
     cbe:	6f ef       	ldi	r22, 0xFF	; 255
     cc0:	7f ef       	ldi	r23, 0xFF	; 255
     cc2:	c5 01       	movw	r24, r10
     cc4:	2d d1       	rcall	.+602    	; 0xf20 <strnlen_P>
     cc6:	4c 01       	movw	r8, r24
     cc8:	f3 2d       	mov	r31, r3
     cca:	f0 68       	ori	r31, 0x80	; 128
     ccc:	3f 2e       	mov	r3, r31
     cce:	82 01       	movw	r16, r4
     cd0:	33 fc       	sbrc	r3, 3
     cd2:	19 c0       	rjmp	.+50     	; 0xd06 <vfprintf+0x1e0>
     cd4:	82 2d       	mov	r24, r2
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	88 16       	cp	r8, r24
     cda:	99 06       	cpc	r9, r25
     cdc:	a0 f4       	brcc	.+40     	; 0xd06 <vfprintf+0x1e0>
     cde:	b6 01       	movw	r22, r12
     ce0:	80 e2       	ldi	r24, 0x20	; 32
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	33 d1       	rcall	.+614    	; 0xf4c <fputc>
     ce6:	2a 94       	dec	r2
     ce8:	f5 cf       	rjmp	.-22     	; 0xcd4 <vfprintf+0x1ae>
     cea:	f5 01       	movw	r30, r10
     cec:	37 fc       	sbrc	r3, 7
     cee:	85 91       	lpm	r24, Z+
     cf0:	37 fe       	sbrs	r3, 7
     cf2:	81 91       	ld	r24, Z+
     cf4:	5f 01       	movw	r10, r30
     cf6:	b6 01       	movw	r22, r12
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	28 d1       	rcall	.+592    	; 0xf4c <fputc>
     cfc:	21 10       	cpse	r2, r1
     cfe:	2a 94       	dec	r2
     d00:	21 e0       	ldi	r18, 0x01	; 1
     d02:	82 1a       	sub	r8, r18
     d04:	91 08       	sbc	r9, r1
     d06:	81 14       	cp	r8, r1
     d08:	91 04       	cpc	r9, r1
     d0a:	79 f7       	brne	.-34     	; 0xcea <vfprintf+0x1c4>
     d0c:	e1 c0       	rjmp	.+450    	; 0xed0 <vfprintf+0x3aa>
     d0e:	84 36       	cpi	r24, 0x64	; 100
     d10:	11 f0       	breq	.+4      	; 0xd16 <vfprintf+0x1f0>
     d12:	89 36       	cpi	r24, 0x69	; 105
     d14:	39 f5       	brne	.+78     	; 0xd64 <vfprintf+0x23e>
     d16:	f8 01       	movw	r30, r16
     d18:	37 fe       	sbrs	r3, 7
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <vfprintf+0x204>
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	0c 5f       	subi	r16, 0xFC	; 252
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	08 c0       	rjmp	.+16     	; 0xd3a <vfprintf+0x214>
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	07 2e       	mov	r0, r23
     d30:	00 0c       	add	r0, r0
     d32:	88 0b       	sbc	r24, r24
     d34:	99 0b       	sbc	r25, r25
     d36:	0e 5f       	subi	r16, 0xFE	; 254
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	f3 2d       	mov	r31, r3
     d3c:	ff 76       	andi	r31, 0x6F	; 111
     d3e:	3f 2e       	mov	r3, r31
     d40:	97 ff       	sbrs	r25, 7
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <vfprintf+0x230>
     d44:	90 95       	com	r25
     d46:	80 95       	com	r24
     d48:	70 95       	com	r23
     d4a:	61 95       	neg	r22
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	8f 4f       	sbci	r24, 0xFF	; 255
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	f0 68       	ori	r31, 0x80	; 128
     d54:	3f 2e       	mov	r3, r31
     d56:	2a e0       	ldi	r18, 0x0A	; 10
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	a3 01       	movw	r20, r6
     d5c:	33 d1       	rcall	.+614    	; 0xfc4 <__ultoa_invert>
     d5e:	88 2e       	mov	r8, r24
     d60:	86 18       	sub	r8, r6
     d62:	44 c0       	rjmp	.+136    	; 0xdec <vfprintf+0x2c6>
     d64:	85 37       	cpi	r24, 0x75	; 117
     d66:	31 f4       	brne	.+12     	; 0xd74 <vfprintf+0x24e>
     d68:	23 2d       	mov	r18, r3
     d6a:	2f 7e       	andi	r18, 0xEF	; 239
     d6c:	b2 2e       	mov	r11, r18
     d6e:	2a e0       	ldi	r18, 0x0A	; 10
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	25 c0       	rjmp	.+74     	; 0xdbe <vfprintf+0x298>
     d74:	93 2d       	mov	r25, r3
     d76:	99 7f       	andi	r25, 0xF9	; 249
     d78:	b9 2e       	mov	r11, r25
     d7a:	8f 36       	cpi	r24, 0x6F	; 111
     d7c:	c1 f0       	breq	.+48     	; 0xdae <vfprintf+0x288>
     d7e:	18 f4       	brcc	.+6      	; 0xd86 <vfprintf+0x260>
     d80:	88 35       	cpi	r24, 0x58	; 88
     d82:	79 f0       	breq	.+30     	; 0xda2 <vfprintf+0x27c>
     d84:	ae c0       	rjmp	.+348    	; 0xee2 <vfprintf+0x3bc>
     d86:	80 37       	cpi	r24, 0x70	; 112
     d88:	19 f0       	breq	.+6      	; 0xd90 <vfprintf+0x26a>
     d8a:	88 37       	cpi	r24, 0x78	; 120
     d8c:	21 f0       	breq	.+8      	; 0xd96 <vfprintf+0x270>
     d8e:	a9 c0       	rjmp	.+338    	; 0xee2 <vfprintf+0x3bc>
     d90:	e9 2f       	mov	r30, r25
     d92:	e0 61       	ori	r30, 0x10	; 16
     d94:	be 2e       	mov	r11, r30
     d96:	b4 fe       	sbrs	r11, 4
     d98:	0d c0       	rjmp	.+26     	; 0xdb4 <vfprintf+0x28e>
     d9a:	fb 2d       	mov	r31, r11
     d9c:	f4 60       	ori	r31, 0x04	; 4
     d9e:	bf 2e       	mov	r11, r31
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <vfprintf+0x28e>
     da2:	34 fe       	sbrs	r3, 4
     da4:	0a c0       	rjmp	.+20     	; 0xdba <vfprintf+0x294>
     da6:	29 2f       	mov	r18, r25
     da8:	26 60       	ori	r18, 0x06	; 6
     daa:	b2 2e       	mov	r11, r18
     dac:	06 c0       	rjmp	.+12     	; 0xdba <vfprintf+0x294>
     dae:	28 e0       	ldi	r18, 0x08	; 8
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <vfprintf+0x298>
     db4:	20 e1       	ldi	r18, 0x10	; 16
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <vfprintf+0x298>
     dba:	20 e1       	ldi	r18, 0x10	; 16
     dbc:	32 e0       	ldi	r19, 0x02	; 2
     dbe:	f8 01       	movw	r30, r16
     dc0:	b7 fe       	sbrs	r11, 7
     dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <vfprintf+0x2ac>
     dc4:	60 81       	ld	r22, Z
     dc6:	71 81       	ldd	r23, Z+1	; 0x01
     dc8:	82 81       	ldd	r24, Z+2	; 0x02
     dca:	93 81       	ldd	r25, Z+3	; 0x03
     dcc:	0c 5f       	subi	r16, 0xFC	; 252
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	06 c0       	rjmp	.+12     	; 0xdde <vfprintf+0x2b8>
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 5f       	subi	r16, 0xFE	; 254
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	a3 01       	movw	r20, r6
     de0:	f1 d0       	rcall	.+482    	; 0xfc4 <__ultoa_invert>
     de2:	88 2e       	mov	r8, r24
     de4:	86 18       	sub	r8, r6
     de6:	fb 2d       	mov	r31, r11
     de8:	ff 77       	andi	r31, 0x7F	; 127
     dea:	3f 2e       	mov	r3, r31
     dec:	36 fe       	sbrs	r3, 6
     dee:	0d c0       	rjmp	.+26     	; 0xe0a <vfprintf+0x2e4>
     df0:	23 2d       	mov	r18, r3
     df2:	2e 7f       	andi	r18, 0xFE	; 254
     df4:	a2 2e       	mov	r10, r18
     df6:	89 14       	cp	r8, r9
     df8:	58 f4       	brcc	.+22     	; 0xe10 <vfprintf+0x2ea>
     dfa:	34 fe       	sbrs	r3, 4
     dfc:	0b c0       	rjmp	.+22     	; 0xe14 <vfprintf+0x2ee>
     dfe:	32 fc       	sbrc	r3, 2
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <vfprintf+0x2ee>
     e02:	83 2d       	mov	r24, r3
     e04:	8e 7e       	andi	r24, 0xEE	; 238
     e06:	a8 2e       	mov	r10, r24
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <vfprintf+0x2ee>
     e0a:	b8 2c       	mov	r11, r8
     e0c:	a3 2c       	mov	r10, r3
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <vfprintf+0x2f0>
     e10:	b8 2c       	mov	r11, r8
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <vfprintf+0x2f0>
     e14:	b9 2c       	mov	r11, r9
     e16:	a4 fe       	sbrs	r10, 4
     e18:	0f c0       	rjmp	.+30     	; 0xe38 <vfprintf+0x312>
     e1a:	fe 01       	movw	r30, r28
     e1c:	e8 0d       	add	r30, r8
     e1e:	f1 1d       	adc	r31, r1
     e20:	80 81       	ld	r24, Z
     e22:	80 33       	cpi	r24, 0x30	; 48
     e24:	21 f4       	brne	.+8      	; 0xe2e <vfprintf+0x308>
     e26:	9a 2d       	mov	r25, r10
     e28:	99 7e       	andi	r25, 0xE9	; 233
     e2a:	a9 2e       	mov	r10, r25
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <vfprintf+0x31a>
     e2e:	a2 fe       	sbrs	r10, 2
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <vfprintf+0x318>
     e32:	b3 94       	inc	r11
     e34:	b3 94       	inc	r11
     e36:	04 c0       	rjmp	.+8      	; 0xe40 <vfprintf+0x31a>
     e38:	8a 2d       	mov	r24, r10
     e3a:	86 78       	andi	r24, 0x86	; 134
     e3c:	09 f0       	breq	.+2      	; 0xe40 <vfprintf+0x31a>
     e3e:	b3 94       	inc	r11
     e40:	a3 fc       	sbrc	r10, 3
     e42:	10 c0       	rjmp	.+32     	; 0xe64 <vfprintf+0x33e>
     e44:	a0 fe       	sbrs	r10, 0
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <vfprintf+0x32e>
     e48:	b2 14       	cp	r11, r2
     e4a:	80 f4       	brcc	.+32     	; 0xe6c <vfprintf+0x346>
     e4c:	28 0c       	add	r2, r8
     e4e:	92 2c       	mov	r9, r2
     e50:	9b 18       	sub	r9, r11
     e52:	0d c0       	rjmp	.+26     	; 0xe6e <vfprintf+0x348>
     e54:	b2 14       	cp	r11, r2
     e56:	58 f4       	brcc	.+22     	; 0xe6e <vfprintf+0x348>
     e58:	b6 01       	movw	r22, r12
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	76 d0       	rcall	.+236    	; 0xf4c <fputc>
     e60:	b3 94       	inc	r11
     e62:	f8 cf       	rjmp	.-16     	; 0xe54 <vfprintf+0x32e>
     e64:	b2 14       	cp	r11, r2
     e66:	18 f4       	brcc	.+6      	; 0xe6e <vfprintf+0x348>
     e68:	2b 18       	sub	r2, r11
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0x34a>
     e6c:	98 2c       	mov	r9, r8
     e6e:	21 2c       	mov	r2, r1
     e70:	a4 fe       	sbrs	r10, 4
     e72:	0f c0       	rjmp	.+30     	; 0xe92 <vfprintf+0x36c>
     e74:	b6 01       	movw	r22, r12
     e76:	80 e3       	ldi	r24, 0x30	; 48
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	68 d0       	rcall	.+208    	; 0xf4c <fputc>
     e7c:	a2 fe       	sbrs	r10, 2
     e7e:	16 c0       	rjmp	.+44     	; 0xeac <vfprintf+0x386>
     e80:	a1 fc       	sbrc	r10, 1
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <vfprintf+0x364>
     e84:	88 e7       	ldi	r24, 0x78	; 120
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <vfprintf+0x368>
     e8a:	88 e5       	ldi	r24, 0x58	; 88
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	b6 01       	movw	r22, r12
     e90:	0c c0       	rjmp	.+24     	; 0xeaa <vfprintf+0x384>
     e92:	8a 2d       	mov	r24, r10
     e94:	86 78       	andi	r24, 0x86	; 134
     e96:	51 f0       	breq	.+20     	; 0xeac <vfprintf+0x386>
     e98:	a1 fe       	sbrs	r10, 1
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <vfprintf+0x37a>
     e9c:	8b e2       	ldi	r24, 0x2B	; 43
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <vfprintf+0x37c>
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	a7 fc       	sbrc	r10, 7
     ea4:	8d e2       	ldi	r24, 0x2D	; 45
     ea6:	b6 01       	movw	r22, r12
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	50 d0       	rcall	.+160    	; 0xf4c <fputc>
     eac:	89 14       	cp	r8, r9
     eae:	30 f4       	brcc	.+12     	; 0xebc <vfprintf+0x396>
     eb0:	b6 01       	movw	r22, r12
     eb2:	80 e3       	ldi	r24, 0x30	; 48
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	4a d0       	rcall	.+148    	; 0xf4c <fputc>
     eb8:	9a 94       	dec	r9
     eba:	f8 cf       	rjmp	.-16     	; 0xeac <vfprintf+0x386>
     ebc:	8a 94       	dec	r8
     ebe:	f3 01       	movw	r30, r6
     ec0:	e8 0d       	add	r30, r8
     ec2:	f1 1d       	adc	r31, r1
     ec4:	80 81       	ld	r24, Z
     ec6:	b6 01       	movw	r22, r12
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	40 d0       	rcall	.+128    	; 0xf4c <fputc>
     ecc:	81 10       	cpse	r8, r1
     ece:	f6 cf       	rjmp	.-20     	; 0xebc <vfprintf+0x396>
     ed0:	22 20       	and	r2, r2
     ed2:	09 f4       	brne	.+2      	; 0xed6 <vfprintf+0x3b0>
     ed4:	4e ce       	rjmp	.-868    	; 0xb72 <vfprintf+0x4c>
     ed6:	b6 01       	movw	r22, r12
     ed8:	80 e2       	ldi	r24, 0x20	; 32
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	37 d0       	rcall	.+110    	; 0xf4c <fputc>
     ede:	2a 94       	dec	r2
     ee0:	f7 cf       	rjmp	.-18     	; 0xed0 <vfprintf+0x3aa>
     ee2:	f6 01       	movw	r30, r12
     ee4:	86 81       	ldd	r24, Z+6	; 0x06
     ee6:	97 81       	ldd	r25, Z+7	; 0x07
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <vfprintf+0x3c8>
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	9f ef       	ldi	r25, 0xFF	; 255
     eee:	2b 96       	adiw	r28, 0x0b	; 11
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	cf 90       	pop	r12
     f0a:	bf 90       	pop	r11
     f0c:	af 90       	pop	r10
     f0e:	9f 90       	pop	r9
     f10:	8f 90       	pop	r8
     f12:	7f 90       	pop	r7
     f14:	6f 90       	pop	r6
     f16:	5f 90       	pop	r5
     f18:	4f 90       	pop	r4
     f1a:	3f 90       	pop	r3
     f1c:	2f 90       	pop	r2
     f1e:	08 95       	ret

00000f20 <strnlen_P>:
     f20:	fc 01       	movw	r30, r24
     f22:	05 90       	lpm	r0, Z+
     f24:	61 50       	subi	r22, 0x01	; 1
     f26:	70 40       	sbci	r23, 0x00	; 0
     f28:	01 10       	cpse	r0, r1
     f2a:	d8 f7       	brcc	.-10     	; 0xf22 <strnlen_P+0x2>
     f2c:	80 95       	com	r24
     f2e:	90 95       	com	r25
     f30:	8e 0f       	add	r24, r30
     f32:	9f 1f       	adc	r25, r31
     f34:	08 95       	ret

00000f36 <strnlen>:
     f36:	fc 01       	movw	r30, r24
     f38:	61 50       	subi	r22, 0x01	; 1
     f3a:	70 40       	sbci	r23, 0x00	; 0
     f3c:	01 90       	ld	r0, Z+
     f3e:	01 10       	cpse	r0, r1
     f40:	d8 f7       	brcc	.-10     	; 0xf38 <strnlen+0x2>
     f42:	80 95       	com	r24
     f44:	90 95       	com	r25
     f46:	8e 0f       	add	r24, r30
     f48:	9f 1f       	adc	r25, r31
     f4a:	08 95       	ret

00000f4c <fputc>:
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	fb 01       	movw	r30, r22
     f56:	23 81       	ldd	r18, Z+3	; 0x03
     f58:	21 fd       	sbrc	r18, 1
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <fputc+0x16>
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	2c c0       	rjmp	.+88     	; 0xfba <fputc+0x6e>
     f62:	22 ff       	sbrs	r18, 2
     f64:	16 c0       	rjmp	.+44     	; 0xf92 <fputc+0x46>
     f66:	46 81       	ldd	r20, Z+6	; 0x06
     f68:	57 81       	ldd	r21, Z+7	; 0x07
     f6a:	24 81       	ldd	r18, Z+4	; 0x04
     f6c:	35 81       	ldd	r19, Z+5	; 0x05
     f6e:	42 17       	cp	r20, r18
     f70:	53 07       	cpc	r21, r19
     f72:	44 f4       	brge	.+16     	; 0xf84 <fputc+0x38>
     f74:	a0 81       	ld	r26, Z
     f76:	b1 81       	ldd	r27, Z+1	; 0x01
     f78:	9d 01       	movw	r18, r26
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	31 83       	std	Z+1, r19	; 0x01
     f80:	20 83       	st	Z, r18
     f82:	8c 93       	st	X, r24
     f84:	26 81       	ldd	r18, Z+6	; 0x06
     f86:	37 81       	ldd	r19, Z+7	; 0x07
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	37 83       	std	Z+7, r19	; 0x07
     f8e:	26 83       	std	Z+6, r18	; 0x06
     f90:	14 c0       	rjmp	.+40     	; 0xfba <fputc+0x6e>
     f92:	8b 01       	movw	r16, r22
     f94:	ec 01       	movw	r28, r24
     f96:	fb 01       	movw	r30, r22
     f98:	00 84       	ldd	r0, Z+8	; 0x08
     f9a:	f1 85       	ldd	r31, Z+9	; 0x09
     f9c:	e0 2d       	mov	r30, r0
     f9e:	09 95       	icall
     fa0:	89 2b       	or	r24, r25
     fa2:	e1 f6       	brne	.-72     	; 0xf5c <fputc+0x10>
     fa4:	d8 01       	movw	r26, r16
     fa6:	16 96       	adiw	r26, 0x06	; 6
     fa8:	8d 91       	ld	r24, X+
     faa:	9c 91       	ld	r25, X
     fac:	17 97       	sbiw	r26, 0x07	; 7
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	17 96       	adiw	r26, 0x07	; 7
     fb2:	9c 93       	st	X, r25
     fb4:	8e 93       	st	-X, r24
     fb6:	16 97       	sbiw	r26, 0x06	; 6
     fb8:	ce 01       	movw	r24, r28
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <__ultoa_invert>:
     fc4:	fa 01       	movw	r30, r20
     fc6:	aa 27       	eor	r26, r26
     fc8:	28 30       	cpi	r18, 0x08	; 8
     fca:	51 f1       	breq	.+84     	; 0x1020 <__ultoa_invert+0x5c>
     fcc:	20 31       	cpi	r18, 0x10	; 16
     fce:	81 f1       	breq	.+96     	; 0x1030 <__ultoa_invert+0x6c>
     fd0:	e8 94       	clt
     fd2:	6f 93       	push	r22
     fd4:	6e 7f       	andi	r22, 0xFE	; 254
     fd6:	6e 5f       	subi	r22, 0xFE	; 254
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	af 4f       	sbci	r26, 0xFF	; 255
     fe0:	b1 e0       	ldi	r27, 0x01	; 1
     fe2:	3e d0       	rcall	.+124    	; 0x1060 <__ultoa_invert+0x9c>
     fe4:	b4 e0       	ldi	r27, 0x04	; 4
     fe6:	3c d0       	rcall	.+120    	; 0x1060 <__ultoa_invert+0x9c>
     fe8:	67 0f       	add	r22, r23
     fea:	78 1f       	adc	r23, r24
     fec:	89 1f       	adc	r24, r25
     fee:	9a 1f       	adc	r25, r26
     ff0:	a1 1d       	adc	r26, r1
     ff2:	68 0f       	add	r22, r24
     ff4:	79 1f       	adc	r23, r25
     ff6:	8a 1f       	adc	r24, r26
     ff8:	91 1d       	adc	r25, r1
     ffa:	a1 1d       	adc	r26, r1
     ffc:	6a 0f       	add	r22, r26
     ffe:	71 1d       	adc	r23, r1
    1000:	81 1d       	adc	r24, r1
    1002:	91 1d       	adc	r25, r1
    1004:	a1 1d       	adc	r26, r1
    1006:	20 d0       	rcall	.+64     	; 0x1048 <__ultoa_invert+0x84>
    1008:	09 f4       	brne	.+2      	; 0x100c <__ultoa_invert+0x48>
    100a:	68 94       	set
    100c:	3f 91       	pop	r19
    100e:	2a e0       	ldi	r18, 0x0A	; 10
    1010:	26 9f       	mul	r18, r22
    1012:	11 24       	eor	r1, r1
    1014:	30 19       	sub	r19, r0
    1016:	30 5d       	subi	r19, 0xD0	; 208
    1018:	31 93       	st	Z+, r19
    101a:	de f6       	brtc	.-74     	; 0xfd2 <__ultoa_invert+0xe>
    101c:	cf 01       	movw	r24, r30
    101e:	08 95       	ret
    1020:	46 2f       	mov	r20, r22
    1022:	47 70       	andi	r20, 0x07	; 7
    1024:	40 5d       	subi	r20, 0xD0	; 208
    1026:	41 93       	st	Z+, r20
    1028:	b3 e0       	ldi	r27, 0x03	; 3
    102a:	0f d0       	rcall	.+30     	; 0x104a <__ultoa_invert+0x86>
    102c:	c9 f7       	brne	.-14     	; 0x1020 <__ultoa_invert+0x5c>
    102e:	f6 cf       	rjmp	.-20     	; 0x101c <__ultoa_invert+0x58>
    1030:	46 2f       	mov	r20, r22
    1032:	4f 70       	andi	r20, 0x0F	; 15
    1034:	40 5d       	subi	r20, 0xD0	; 208
    1036:	4a 33       	cpi	r20, 0x3A	; 58
    1038:	18 f0       	brcs	.+6      	; 0x1040 <__ultoa_invert+0x7c>
    103a:	49 5d       	subi	r20, 0xD9	; 217
    103c:	31 fd       	sbrc	r19, 1
    103e:	40 52       	subi	r20, 0x20	; 32
    1040:	41 93       	st	Z+, r20
    1042:	02 d0       	rcall	.+4      	; 0x1048 <__ultoa_invert+0x84>
    1044:	a9 f7       	brne	.-22     	; 0x1030 <__ultoa_invert+0x6c>
    1046:	ea cf       	rjmp	.-44     	; 0x101c <__ultoa_invert+0x58>
    1048:	b4 e0       	ldi	r27, 0x04	; 4
    104a:	a6 95       	lsr	r26
    104c:	97 95       	ror	r25
    104e:	87 95       	ror	r24
    1050:	77 95       	ror	r23
    1052:	67 95       	ror	r22
    1054:	ba 95       	dec	r27
    1056:	c9 f7       	brne	.-14     	; 0x104a <__ultoa_invert+0x86>
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	61 05       	cpc	r22, r1
    105c:	71 05       	cpc	r23, r1
    105e:	08 95       	ret
    1060:	9b 01       	movw	r18, r22
    1062:	ac 01       	movw	r20, r24
    1064:	0a 2e       	mov	r0, r26
    1066:	06 94       	lsr	r0
    1068:	57 95       	ror	r21
    106a:	47 95       	ror	r20
    106c:	37 95       	ror	r19
    106e:	27 95       	ror	r18
    1070:	ba 95       	dec	r27
    1072:	c9 f7       	brne	.-14     	; 0x1066 <__ultoa_invert+0xa2>
    1074:	62 0f       	add	r22, r18
    1076:	73 1f       	adc	r23, r19
    1078:	84 1f       	adc	r24, r20
    107a:	95 1f       	adc	r25, r21
    107c:	a0 1d       	adc	r26, r0
    107e:	08 95       	ret

00001080 <_exit>:
    1080:	f8 94       	cli

00001082 <__stop_program>:
    1082:	ff cf       	rjmp	.-2      	; 0x1082 <__stop_program>
