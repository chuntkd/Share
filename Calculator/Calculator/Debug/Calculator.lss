
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000ab2  00000b46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800154  00800154  00000b9a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014bc  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf5  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a01  00000000  00000000  00002f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00003914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e1  00000000  00000000  00003b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a3c  00000000  00000000  0000416d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004ba9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	52 c0       	rjmp	.+164    	; 0xa6 <__ctors_end>
   2:	00 00       	nop
   4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
   6:	00 00       	nop
   8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
   a:	00 00       	nop
   c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
   e:	00 00       	nop
  10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
  12:	00 00       	nop
  14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
  16:	00 00       	nop
  18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
  22:	00 00       	nop
  24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
  26:	00 00       	nop
  28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
  32:	00 00       	nop
  34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
  36:	00 00       	nop
  38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c6 c1       	rjmp	.+908    	; 0x3ce <__vector_16>
  42:	00 00       	nop
  44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
  46:	00 00       	nop
  48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
  52:	00 00       	nop
  54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
  56:	00 00       	nop
  58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
  62:	00 00       	nop
  64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
  66:	00 00       	nop
  68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
  72:	00 00       	nop
  74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
  76:	00 00       	nop
  78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
  82:	00 00       	nop
  84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
  86:	00 00       	nop
  88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c7 01       	movw	r24, r14
  8e:	e3 01       	movw	r28, r6
  90:	c5 01       	movw	r24, r10
  92:	e5 01       	movw	r28, r10
  94:	ca 01       	movw	r24, r20
  96:	cd 01       	movw	r24, r26
  98:	cf 01       	movw	r24, r30
  9a:	d1 01       	movw	r26, r2
  9c:	d3 01       	movw	r26, r6
  9e:	d9 01       	movw	r26, r18
  a0:	dc 01       	movw	r26, r24
  a2:	df 01       	movw	r26, r30
  a4:	d6 01       	movw	r26, r12

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d0 e1       	ldi	r29, 0x10	; 16
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	e2 eb       	ldi	r30, 0xB2	; 178
  ba:	fa e0       	ldi	r31, 0x0A	; 10
  bc:	00 e0       	ldi	r16, 0x00	; 0
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x14>
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a4 35       	cpi	r26, 0x54	; 84
  c8:	b1 07       	cpc	r27, r17
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x10>

000000cc <__do_clear_bss>:
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	a4 e5       	ldi	r26, 0x54	; 84
  d0:	b1 e0       	ldi	r27, 0x01	; 1
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
  d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
  d6:	a0 3c       	cpi	r26, 0xC0	; 192
  d8:	b2 07       	cpc	r27, r18
  da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
  dc:	a5 d1       	rcall	.+842    	; 0x428 <main>
  de:	e7 c4       	rjmp	.+2510   	; 0xaae <_exit>

000000e0 <__bad_interrupt>:
  e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <ADC_init>:
 */ 
#include "ADC.h"

void ADC_init(void)
{
	ADMUX |= (0<< REFS1) | (1<< REFS0); // AVCC사용
  e2:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= 0x07; // 분주비 128 : 125KHz , 50k ~ 200k 권장
  e4:	86 b1       	in	r24, 0x06	; 6
  e6:	87 60       	ori	r24, 0x07	; 7
  e8:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN); // ADC 활성화
  ea:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (0<<ADFR); // Freerun 활성화, single 모드 (0) 권장
  ec:	86 b1       	in	r24, 0x06	; 6
  ee:	86 b9       	out	0x06, r24	; 6
  f0:	08 95       	ret

000000f2 <QueueInit>:
{
	if(pos == QUE_LEN - 1)
		return 0;
	else
		return pos+1;
}
  f2:	fc 01       	movw	r30, r24
  f4:	10 82       	st	Z, r1
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	08 95       	ret

000000fa <QIsEmpty>:
  fa:	fc 01       	movw	r30, r24
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	20 81       	ld	r18, Z
 100:	91 81       	ldd	r25, Z+1	; 0x01
 102:	29 13       	cpse	r18, r25
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret

00000108 <Enqueue>:

void Enqueue(Queue* pq, Data data)
{
 108:	fc 01       	movw	r30, r24
	if(NextPosIdx(pq->rear) == pq->front)
 10a:	81 81       	ldd	r24, Z+1	; 0x01
		return FALSE;
}

uint8_t NextPosIdx(uint8_t pos)
{
	if(pos == QUE_LEN - 1)
 10c:	83 36       	cpi	r24, 0x63	; 99
 10e:	11 f0       	breq	.+4      	; 0x114 <Enqueue+0xc>
		return 0;
	else
		return pos+1;
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	01 c0       	rjmp	.+2      	; 0x116 <Enqueue+0xe>
}

uint8_t NextPosIdx(uint8_t pos)
{
	if(pos == QUE_LEN - 1)
		return 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
		return pos+1;
}

void Enqueue(Queue* pq, Data data)
{
	if(NextPosIdx(pq->rear) == pq->front)
 116:	90 81       	ld	r25, Z
 118:	98 13       	cpse	r25, r24
 11a:	08 c0       	rjmp	.+16     	; 0x12c <Enqueue+0x24>
	{
		printf( "Queue Memory Error!");
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	9f 93       	push	r25
 122:	8f 93       	push	r24
 124:	d6 d1       	rcall	.+940    	; 0x4d2 <printf>
		exit(-1) ;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	c1 d4       	rcall	.+2434   	; 0xaae <_exit>
	}
	
	
	pq->rear = NextPosIdx(pq->rear);
 12c:	81 83       	std	Z+1, r24	; 0x01
	pq->queArr[pq->rear] = data;
 12e:	e8 0f       	add	r30, r24
 130:	f1 1d       	adc	r31, r1
 132:	62 83       	std	Z+2, r22	; 0x02
 134:	08 95       	ret

00000136 <Dequeue>:
}

Data Dequeue(Queue* pq)
{
 136:	fc 01       	movw	r30, r24
	pq->rear = 0;
}

uint8_t QIsEmpty(Queue* pq)
{
	if(pq->front == pq->rear) // 큐가 텅 비었다면 TRUE
 138:	80 81       	ld	r24, Z
	pq->queArr[pq->rear] = data;
}

Data Dequeue(Queue* pq)
{
	if(QIsEmpty(pq))
 13a:	91 81       	ldd	r25, Z+1	; 0x01
 13c:	89 13       	cpse	r24, r25
 13e:	08 c0       	rjmp	.+16     	; 0x150 <Dequeue+0x1a>
	{
		printf( "Queue Memory Error! " ) ;
 140:	84 e2       	ldi	r24, 0x24	; 36
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9f 93       	push	r25
 146:	8f 93       	push	r24
 148:	c4 d1       	rcall	.+904    	; 0x4d2 <printf>
		exit(-1);
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	9f ef       	ldi	r25, 0xFF	; 255
 14e:	af d4       	rcall	.+2398   	; 0xaae <_exit>
		return FALSE;
}

uint8_t NextPosIdx(uint8_t pos)
{
	if(pos == QUE_LEN - 1)
 150:	83 36       	cpi	r24, 0x63	; 99
 152:	11 f0       	breq	.+4      	; 0x158 <Dequeue+0x22>
		return 0;
	else
		return pos+1;
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	01 c0       	rjmp	.+2      	; 0x15a <Dequeue+0x24>
}

uint8_t NextPosIdx(uint8_t pos)
{
	if(pos == QUE_LEN - 1)
		return 0;
 158:	80 e0       	ldi	r24, 0x00	; 0
	{
		printf( "Queue Memory Error! " ) ;
		exit(-1);
	}
	
	pq->front = NextPosIdx(pq->front);
 15a:	80 83       	st	Z, r24
	return pq->queArr[pq->front];
 15c:	e8 0f       	add	r30, r24
 15e:	f1 1d       	adc	r31, r1
}
 160:	82 81       	ldd	r24, Z+2	; 0x02
 162:	08 95       	ret

00000164 <LCD_Pulse_Enable>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	91 9a       	sbi	0x12, 1	; 18
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Pulse_Enable+0x6>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Pulse_Enable+0xc>
 170:	00 00       	nop
 172:	91 98       	cbi	0x12, 1	; 18
 174:	8f e9       	ldi	r24, 0x9F	; 159
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Pulse_Enable+0x14>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Pulse_Enable+0x1a>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <LCD_WriteCommand>:
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
 186:	90 98       	cbi	0x12, 0	; 18
 188:	82 b3       	in	r24, 0x12	; 18
 18a:	8f 70       	andi	r24, 0x0F	; 15
 18c:	9c 2f       	mov	r25, r28
 18e:	90 7f       	andi	r25, 0xF0	; 240
 190:	89 2b       	or	r24, r25
 192:	82 bb       	out	0x12, r24	; 18
 194:	e7 df       	rcall	.-50     	; 0x164 <LCD_Pulse_Enable>
 196:	82 b3       	in	r24, 0x12	; 18
 198:	28 2f       	mov	r18, r24
 19a:	2f 70       	andi	r18, 0x0F	; 15
 19c:	30 e1       	ldi	r19, 0x10	; 16
 19e:	c3 9f       	mul	r28, r19
 1a0:	c0 01       	movw	r24, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	82 2b       	or	r24, r18
 1a6:	82 bb       	out	0x12, r24	; 18
 1a8:	dd df       	rcall	.-70     	; 0x164 <LCD_Pulse_Enable>
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <LCD_WriteData>:
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
 1b2:	90 9a       	sbi	0x12, 0	; 18
 1b4:	82 b3       	in	r24, 0x12	; 18
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	9c 2f       	mov	r25, r28
 1ba:	90 7f       	andi	r25, 0xF0	; 240
 1bc:	89 2b       	or	r24, r25
 1be:	82 bb       	out	0x12, r24	; 18
 1c0:	d1 df       	rcall	.-94     	; 0x164 <LCD_Pulse_Enable>
 1c2:	82 b3       	in	r24, 0x12	; 18
 1c4:	28 2f       	mov	r18, r24
 1c6:	2f 70       	andi	r18, 0x0F	; 15
 1c8:	30 e1       	ldi	r19, 0x10	; 16
 1ca:	c3 9f       	mul	r28, r19
 1cc:	c0 01       	movw	r24, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	82 2b       	or	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	c7 df       	rcall	.-114    	; 0x164 <LCD_Pulse_Enable>
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <LCD_WriteCommand_Init>:
 1da:	90 98       	cbi	0x12, 0	; 18
 1dc:	92 b3       	in	r25, 0x12	; 18
 1de:	9f 70       	andi	r25, 0x0F	; 15
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	89 2b       	or	r24, r25
 1e4:	82 bb       	out	0x12, r24	; 18
 1e6:	be cf       	rjmp	.-132    	; 0x164 <LCD_Pulse_Enable>
 1e8:	08 95       	ret

000001ea <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init() // LCD 기본 설정
{
	LCD_DATA_DDR = 0xff;
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	81 bb       	out	0x11, r24	; 17
	LCD_RS_DDR |= (1<<LCD_RS);
 1ee:	88 9a       	sbi	0x11, 0	; 17
	LCD_ENABLE_DDR |= (1<<LCD_ENABLE);
 1f0:	89 9a       	sbi	0x11, 1	; 17
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	89 ef       	ldi	r24, 0xF9	; 249
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <LCD_Init+0xe>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_Init+0x18>
 202:	00 00       	nop
	
	_delay_ms(20);
	
	LCD_WriteCommand_Init(0x30);
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	e9 df       	rcall	.-46     	; 0x1da <LCD_WriteCommand_Init>
 208:	8f e1       	ldi	r24, 0x1F	; 31
 20a:	9e e4       	ldi	r25, 0x4E	; 78
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_Init+0x22>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_Init+0x28>
 212:	00 00       	nop
	_delay_ms(5);
	LCD_WriteCommand_Init(0x30);
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	e1 df       	rcall	.-62     	; 0x1da <LCD_WriteCommand_Init>
 218:	9f ef       	ldi	r25, 0xFF	; 255
 21a:	23 ec       	ldi	r18, 0xC3	; 195
 21c:	89 e0       	ldi	r24, 0x09	; 9
 21e:	91 50       	subi	r25, 0x01	; 1
 220:	20 40       	sbci	r18, 0x00	; 0
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <LCD_Init+0x34>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Init+0x3e>
	_delay_ms(200);
	LCD_WriteCommand_Init(0x30);
 228:	00 00       	nop
 22a:	80 e3       	ldi	r24, 0x30	; 48
	LCD_WriteCommand_Init(COMMAND_4_BIT_MODE); // Function Set (N: 디스플레이 행 수(N:0 ==> 1행, N:1 ==> 2행), F: 글자 크기), 설치된 LCD : N:1,F:0
 22c:	d6 df       	rcall	.-84     	; 0x1da <LCD_WriteCommand_Init>
 22e:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(DISPLAY_OFF); // Display off
 230:	d4 df       	rcall	.-88     	; 0x1da <LCD_WriteCommand_Init>
 232:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_CLEAR_DISPLAY); // Display Clear
 234:	a6 df       	rcall	.-180    	; 0x182 <LCD_WriteCommand>
 236:	81 e0       	ldi	r24, 0x01	; 1
	LCD_WriteCommand(COMMAND_ENTRY_MODE); // Entry mode set
 238:	a4 df       	rcall	.-184    	; 0x182 <LCD_WriteCommand>
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	a2 df       	rcall	.-188    	; 0x182 <LCD_WriteCommand>
	LCD_WriteCommand(DISPLAY_ON); // Display on
 23e:	8c e0       	ldi	r24, 0x0C	; 12
 240:	a0 cf       	rjmp	.-192    	; 0x182 <LCD_WriteCommand>
 242:	08 95       	ret

00000244 <LCD_Write_string>:
 244:	0f 93       	push	r16
}


void LCD_Write_string(char *string)
{
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0;string[i]; i++) //종료 문자를 만날 때까지
 24c:	80 81       	ld	r24, Z
 24e:	88 23       	and	r24, r24
 250:	51 f0       	breq	.+20     	; 0x266 <LCD_Write_string+0x22>
 252:	8f 01       	movw	r16, r30
 254:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_WriteData(string[i]); // 문자 단위 출력
 256:	ab df       	rcall	.-170    	; 0x1ae <LCD_WriteData>


void LCD_Write_string(char *string)
{
	uint8_t i;
	for(i=0;string[i]; i++) //종료 문자를 만날 때까지
 258:	cf 5f       	subi	r28, 0xFF	; 255
 25a:	f8 01       	movw	r30, r16
 25c:	ec 0f       	add	r30, r28
 25e:	f1 1d       	adc	r31, r1
 260:	80 81       	ld	r24, Z
 262:	81 11       	cpse	r24, r1
 264:	f8 cf       	rjmp	.-16     	; 0x256 <LCD_Write_string+0x12>
	LCD_WriteData(string[i]); // 문자 단위 출력
}
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <LCD_goto_XY>:
	
	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) +col;
	uint8_t command = 0x80 +address;
	
	LCD_WriteCommand(command); // 커서 이동
 26e:	81 70       	andi	r24, 0x01	; 1
 270:	6f 70       	andi	r22, 0x0F	; 15
 272:	90 e4       	ldi	r25, 0x40	; 64
 274:	89 9f       	mul	r24, r25
 276:	60 0d       	add	r22, r0
 278:	11 24       	eor	r1, r1
 27a:	86 2f       	mov	r24, r22
 27c:	80 58       	subi	r24, 0x80	; 128
 27e:	81 cf       	rjmp	.-254    	; 0x182 <LCD_WriteCommand>
 280:	08 95       	ret

00000282 <KeyPadinit>:



void KeyPadinit()
{
	KEYPAD_DDR = 0x0f;
 282:	8f e0       	ldi	r24, 0x0F	; 15
 284:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_PORT = 0xff; // 내부 pullup 동작
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	8b bb       	out	0x1b, r24	; 27
 28a:	08 95       	ret

0000028c <Get_ButtonState>:
}

uint8_t Get_ButtonState(uint8_t row, uint8_t col)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
	static uint8_t  prevState[16] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}; 
	uint8_t curState;
		
	KEYPAD_COL_PORT |= 0x0f;
 290:	9b b3       	in	r25, 0x1b	; 27
 292:	9f 60       	ori	r25, 0x0F	; 15
 294:	9b bb       	out	0x1b, r25	; 27
	KEYPAD_COL_PORT &= ~(1<<col);
 296:	9b b3       	in	r25, 0x1b	; 27
 298:	a6 2f       	mov	r26, r22
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	06 2e       	mov	r0, r22
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <Get_ButtonState+0x1c>
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <Get_ButtonState+0x18>
 2ac:	20 95       	com	r18
 2ae:	29 23       	and	r18, r25
 2b0:	2b bb       	out	0x1b, r18	; 27
 2b2:	24 e1       	ldi	r18, 0x14	; 20
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	31 09       	sbc	r19, r1
	//_delay_us(1);
	for (int delay = 0; delay<20; delay++);
 2ba:	e9 f7       	brne	.-6      	; 0x2b6 <Get_ButtonState+0x2a>

	curState = (KEYPAD_ROW_PIN & (1<<(row+4))) >> (row+4);
 2bc:	49 b3       	in	r20, 0x19	; 25
 2be:	e8 2f       	mov	r30, r24
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	ef 01       	movw	r28, r30
 2c4:	24 96       	adiw	r28, 0x04	; 4
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	0c 2e       	mov	r0, r28
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <Get_ButtonState+0x46>
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <Get_ButtonState+0x42>
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	24 23       	and	r18, r20
 2da:	35 23       	and	r19, r21
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <Get_ButtonState+0x56>
 2de:	35 95       	asr	r19
 2e0:	27 95       	ror	r18
 2e2:	ca 95       	dec	r28
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <Get_ButtonState+0x52>
	if ((curState == 0) && ((prevState[(4 * row) + col +1]) == 1))
 2e6:	21 11       	cpse	r18, r1
 2e8:	10 c0       	rjmp	.+32     	; 0x30a <Get_ButtonState+0x7e>
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	ee 0f       	add	r30, r30
 2f0:	ff 1f       	adc	r31, r31
 2f2:	ae 0f       	add	r26, r30
 2f4:	bf 1f       	adc	r27, r31
 2f6:	11 96       	adiw	r26, 0x01	; 1
 2f8:	fd 01       	movw	r30, r26
 2fa:	e0 50       	subi	r30, 0x00	; 0
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	80 81       	ld	r24, Z
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	d1 f4       	brne	.+52     	; 0x338 <Get_ButtonState+0xac>
	{
		prevState[(4 * row) + col +1] = curState;
 304:	10 82       	st	Z, r1
		return 0;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	1c c0       	rjmp	.+56     	; 0x342 <Get_ButtonState+0xb6>
	}
	
	if ((curState == 1) && ((prevState[(4 * row) + col +1]) == 0))
 30a:	21 30       	cpi	r18, 0x01	; 1
 30c:	b9 f4       	brne	.+46     	; 0x33c <Get_ButtonState+0xb0>
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	ae 0f       	add	r26, r30
 318:	bf 1f       	adc	r27, r31
 31a:	11 96       	adiw	r26, 0x01	; 1
 31c:	fd 01       	movw	r30, r26
 31e:	e0 50       	subi	r30, 0x00	; 0
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	90 81       	ld	r25, Z
 324:	91 11       	cpse	r25, r1
 326:	0c c0       	rjmp	.+24     	; 0x340 <Get_ButtonState+0xb4>
	{
		prevState[(4 * row) + col +1] = curState;
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	90 83       	st	Z, r25
		return ((4 * row) + col +1);
 32c:	88 0f       	add	r24, r24
 32e:	88 0f       	add	r24, r24
 330:	68 0f       	add	r22, r24
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	86 0f       	add	r24, r22
 336:	05 c0       	rjmp	.+10     	; 0x342 <Get_ButtonState+0xb6>
	}
	return 0;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	03 c0       	rjmp	.+6      	; 0x342 <Get_ButtonState+0xb6>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	01 c0       	rjmp	.+2      	; 0x342 <Get_ButtonState+0xb6>
 340:	80 e0       	ldi	r24, 0x00	; 0
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <Keypad_Scan>:
	}
	return 0;
}
*/
uint8_t Keypad_Scan()
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
	uint8_t ScanData = 0;
	
	for (uint8_t row =0; row<4; row++)
 34c:	d0 e0       	ldi	r29, 0x00	; 0
 34e:	0b c0       	rjmp	.+22     	; 0x366 <Keypad_Scan+0x1e>
	{
		for (uint8_t col=0; col<4; col++)
		{
			ScanData = Get_ButtonState(row,col);
 350:	6c 2f       	mov	r22, r28
 352:	8d 2f       	mov	r24, r29
 354:	9b df       	rcall	.-202    	; 0x28c <Get_ButtonState>
			if (ScanData)
 356:	81 11       	cpse	r24, r1
 358:	09 c0       	rjmp	.+18     	; 0x36c <Keypad_Scan+0x24>
{
	uint8_t ScanData = 0;
	
	for (uint8_t row =0; row<4; row++)
	{
		for (uint8_t col=0; col<4; col++)
 35a:	cf 5f       	subi	r28, 0xFF	; 255
 35c:	c4 30       	cpi	r28, 0x04	; 4
 35e:	c1 f7       	brne	.-16     	; 0x350 <Keypad_Scan+0x8>
*/
uint8_t Keypad_Scan()
{
	uint8_t ScanData = 0;
	
	for (uint8_t row =0; row<4; row++)
 360:	df 5f       	subi	r29, 0xFF	; 255
 362:	d4 30       	cpi	r29, 0x04	; 4
 364:	11 f0       	breq	.+4      	; 0x36a <Keypad_Scan+0x22>
	}
	return 0;
}
*/
uint8_t Keypad_Scan()
{
 366:	c0 e0       	ldi	r28, 0x00	; 0
 368:	f3 cf       	rjmp	.-26     	; 0x350 <Keypad_Scan+0x8>
			{
				return ScanData;
			}
		}
	}
	return 0;
 36a:	80 e0       	ldi	r24, 0x00	; 0
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <Change_Number>:
	return 0;
}*/

uint8_t Change_Number(uint8_t * num)
{
	switch(*num)
 372:	dc 01       	movw	r26, r24
 374:	ec 91       	ld	r30, X
 376:	8e 2f       	mov	r24, r30
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	34 97       	sbiw	r30, 0x04	; 4
 37e:	ed 30       	cpi	r30, 0x0D	; 13
 380:	f1 05       	cpc	r31, r1
 382:	00 f5       	brcc	.+64     	; 0x3c4 <Change_Number+0x52>
 384:	ea 5b       	subi	r30, 0xBA	; 186
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	9b c0       	rjmp	.+310    	; 0x4c0 <__tablejump2__>
		case 4:
		return "+";
		case 5:
		return 4;
		case 6:
		return 5;
 38a:	85 e0       	ldi	r24, 0x05	; 5
 38c:	08 95       	ret
uint8_t Change_Number(uint8_t * num)
{
	switch(*num)
	{
		case 4:
		return "+";
 38e:	89 e3       	ldi	r24, 0x39	; 57
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	08 95       	ret
		case 6:
		return 5;
		case 7:
		return 6;
		case 8:
		return "-";
 394:	8b e3       	ldi	r24, 0x3B	; 59
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	08 95       	ret
		case 9:
		return 7;
 39a:	87 e0       	ldi	r24, 0x07	; 7
 39c:	08 95       	ret
		case 10:
		return 8;
 39e:	88 e0       	ldi	r24, 0x08	; 8
 3a0:	08 95       	ret
		case 11:
		return 9;
 3a2:	89 e0       	ldi	r24, 0x09	; 9
 3a4:	08 95       	ret
		case 12:
		return "*";
 3a6:	8d e3       	ldi	r24, 0x3D	; 61
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	08 95       	ret
		case 16:
		return "/";
 3ac:	8f e3       	ldi	r24, 0x3F	; 63
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	08 95       	ret
		case 13:
		return "#";
 3b2:	81 e4       	ldi	r24, 0x41	; 65
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	08 95       	ret
		case 14:
		return "0";
 3b8:	83 e4       	ldi	r24, 0x43	; 67
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	08 95       	ret
		case 15:
		return "=";
 3be:	85 e4       	ldi	r24, 0x45	; 69
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	08 95       	ret
	}
}
 3c4:	08 95       	ret
	switch(*num)
	{
		case 4:
		return "+";
		case 5:
		return 4;
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	08 95       	ret
		case 6:
		return 5;
		case 7:
		return 6;
 3ca:	86 e0       	ldi	r24, 0x06	; 6
		case 14:
		return "0";
		case 15:
		return "=";
	}
}
 3cc:	08 95       	ret

000003ce <__vector_16>:
#include "main.h"

volatile Queue KeyQue;

ISR(TIMER0_OVF_vect)
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	0b b6       	in	r0, 0x3b	; 59
 3da:	0f 92       	push	r0
 3dc:	2f 93       	push	r18
 3de:	3f 93       	push	r19
 3e0:	4f 93       	push	r20
 3e2:	5f 93       	push	r21
 3e4:	6f 93       	push	r22
 3e6:	7f 93       	push	r23
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
 3ec:	af 93       	push	r26
 3ee:	bf 93       	push	r27
 3f0:	ef 93       	push	r30
 3f2:	ff 93       	push	r31
	uint8_t Key_Data = 0;/*Key_Cal_Data =0, Key_Reset_Data =0;*/
	if (Key_Data = Keypad_Scan())
 3f4:	a9 df       	rcall	.-174    	; 0x348 <Keypad_Scan>
 3f6:	88 23       	and	r24, r24
 3f8:	21 f0       	breq	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		Enqueue(&KeyQue, Key_Data);
 3fa:	68 2f       	mov	r22, r24
 3fc:	84 e5       	ldi	r24, 0x54	; 84
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	83 de       	rcall	.-762    	; 0x108 <Enqueue>
	if (Key_Reset_Data =  Keypad_Reset_Scan())
	{
		Enqueue(&KeyQue, Key_Reset_Data);
	} */

}
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0b be       	out	0x3b, r0	; 59
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <main>:

int main(void)
{
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	c9 57       	subi	r28, 0x79	; 121
 432:	d1 09       	sbc	r29, r1
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	f8 94       	cli
 438:	de bf       	out	0x3e, r29	; 62
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	cd bf       	out	0x3d, r28	; 61
	TCCR0 |= (1<<CS02);
 43e:	83 b7       	in	r24, 0x33	; 51
 440:	84 60       	ori	r24, 0x04	; 4
 442:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
 444:	87 b7       	in	r24, 0x37	; 55
 446:	81 60       	ori	r24, 0x01	; 1
 448:	87 bf       	out	0x37, r24	; 55
	TCNT0 |= 5;
 44a:	82 b7       	in	r24, 0x32	; 50
 44c:	85 60       	ori	r24, 0x05	; 5
 44e:	82 bf       	out	0x32, r24	; 50
	ADC_init();
 450:	48 de       	rcall	.-880    	; 0xe2 <ADC_init>
	KeyPadinit();
 452:	17 df       	rcall	.-466    	; 0x282 <KeyPadinit>
	LCD_Init();
 454:	ca de       	rcall	.-620    	; 0x1ea <LCD_Init>
	QueueInit(&KeyQue);
 456:	84 e5       	ldi	r24, 0x54	; 84
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	4b de       	rcall	.-874    	; 0xf2 <QueueInit>
 45c:	78 94       	sei
	
	uint8_t KeyPadData ;
	uint8_t word[20];
	uint8_t cal[100];
	sei();
 45e:	6e 01       	movw	r12, r28
				KeyPadData = Change_Number(&KeyPadData);
			}
			
			*word = KeyPadData;
			
			sprintf(cal, "KeyPad : %s",word);
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	c8 0e       	add	r12, r24
 464:	d1 1c       	adc	r13, r1
 466:	0f 2e       	mov	r0, r31
 468:	f7 e4       	ldi	r31, 0x47	; 71
 46a:	ef 2e       	mov	r14, r31
 46c:	f1 e0       	ldi	r31, 0x01	; 1
 46e:	ff 2e       	mov	r15, r31
 470:	f0 2d       	mov	r31, r0
 472:	8e 01       	movw	r16, r28
 474:	0a 5e       	subi	r16, 0xEA	; 234
 476:	1f 4f       	sbci	r17, 0xFF	; 255
	sei();
	
	while (1)
	{
		
		if (!QIsEmpty(&KeyQue))
 478:	84 e5       	ldi	r24, 0x54	; 84
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	3e de       	rcall	.-900    	; 0xfa <QIsEmpty>
 47e:	81 11       	cpse	r24, r1
 480:	fb cf       	rjmp	.-10     	; 0x478 <main+0x50>
		{
			KeyPadData = Dequeue(&KeyQue);
 482:	84 e5       	ldi	r24, 0x54	; 84
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	57 de       	rcall	.-850    	; 0x136 <Dequeue>
 488:	89 83       	std	Y+1, r24	; 0x01
			if (KeyPadData>3)
 48a:	84 30       	cpi	r24, 0x04	; 4
 48c:	20 f0       	brcs	.+8      	; 0x496 <main+0x6e>
			{
				KeyPadData = Change_Number(&KeyPadData);
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	6f df       	rcall	.-290    	; 0x372 <Change_Number>
 494:	89 83       	std	Y+1, r24	; 0x01
 496:	89 81       	ldd	r24, Y+1	; 0x01
			}
			
			*word = KeyPadData;
 498:	8a 83       	std	Y+2, r24	; 0x02
			
			sprintf(cal, "KeyPad : %s",word);
 49a:	df 92       	push	r13
 49c:	cf 92       	push	r12
 49e:	ff 92       	push	r15
 4a0:	ef 92       	push	r14
 4a2:	1f 93       	push	r17
 4a4:	0f 93       	push	r16
			LCD_goto_XY(0,0);
 4a6:	28 d0       	rcall	.+80     	; 0x4f8 <sprintf>
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	e0 de       	rcall	.-576    	; 0x26e <LCD_goto_XY>
			LCD_Write_string(cal);
 4ae:	c8 01       	movw	r24, r16
 4b0:	c9 de       	rcall	.-622    	; 0x244 <LCD_Write_string>
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	dc cf       	rjmp	.-72     	; 0x478 <main+0x50>

000004c0 <__tablejump2__>:
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	00 24       	eor	r0, r0
 4c6:	00 1c       	adc	r0, r0
 4c8:	0b be       	out	0x3b, r0	; 59
 4ca:	07 90       	elpm	r0, Z+
 4cc:	f6 91       	elpm	r31, Z
 4ce:	e0 2d       	mov	r30, r0
 4d0:	09 94       	ijmp

000004d2 <printf>:
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	ae 01       	movw	r20, r28
 4dc:	4b 5f       	subi	r20, 0xFB	; 251
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	fa 01       	movw	r30, r20
 4e2:	61 91       	ld	r22, Z+
 4e4:	71 91       	ld	r23, Z+
 4e6:	af 01       	movw	r20, r30
 4e8:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__iob+0x2>
 4ec:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__iob+0x3>
 4f0:	31 d0       	rcall	.+98     	; 0x554 <vfprintf>
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <sprintf>:
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	2e 97       	sbiw	r28, 0x0e	; 14
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
 510:	0d 89       	ldd	r16, Y+21	; 0x15
 512:	1e 89       	ldd	r17, Y+22	; 0x16
 514:	86 e0       	ldi	r24, 0x06	; 6
 516:	8c 83       	std	Y+4, r24	; 0x04
 518:	1a 83       	std	Y+2, r17	; 0x02
 51a:	09 83       	std	Y+1, r16	; 0x01
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	9f e7       	ldi	r25, 0x7F	; 127
 520:	9e 83       	std	Y+6, r25	; 0x06
 522:	8d 83       	std	Y+5, r24	; 0x05
 524:	ae 01       	movw	r20, r28
 526:	47 5e       	subi	r20, 0xE7	; 231
 528:	5f 4f       	sbci	r21, 0xFF	; 255
 52a:	6f 89       	ldd	r22, Y+23	; 0x17
 52c:	78 8d       	ldd	r23, Y+24	; 0x18
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	10 d0       	rcall	.+32     	; 0x554 <vfprintf>
 534:	ef 81       	ldd	r30, Y+7	; 0x07
 536:	f8 85       	ldd	r31, Y+8	; 0x08
 538:	e0 0f       	add	r30, r16
 53a:	f1 1f       	adc	r31, r17
 53c:	10 82       	st	Z, r1
 53e:	2e 96       	adiw	r28, 0x0e	; 14
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	08 95       	ret

00000554 <vfprintf>:
 554:	2f 92       	push	r2
 556:	3f 92       	push	r3
 558:	4f 92       	push	r4
 55a:	5f 92       	push	r5
 55c:	6f 92       	push	r6
 55e:	7f 92       	push	r7
 560:	8f 92       	push	r8
 562:	9f 92       	push	r9
 564:	af 92       	push	r10
 566:	bf 92       	push	r11
 568:	cf 92       	push	r12
 56a:	df 92       	push	r13
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	2b 97       	sbiw	r28, 0x0b	; 11
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	6c 01       	movw	r12, r24
 58a:	7b 01       	movw	r14, r22
 58c:	8a 01       	movw	r16, r20
 58e:	fc 01       	movw	r30, r24
 590:	17 82       	std	Z+7, r1	; 0x07
 592:	16 82       	std	Z+6, r1	; 0x06
 594:	83 81       	ldd	r24, Z+3	; 0x03
 596:	81 ff       	sbrs	r24, 1
 598:	bf c1       	rjmp	.+894    	; 0x918 <vfprintf+0x3c4>
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	3c 01       	movw	r6, r24
 5a0:	f6 01       	movw	r30, r12
 5a2:	93 81       	ldd	r25, Z+3	; 0x03
 5a4:	f7 01       	movw	r30, r14
 5a6:	93 fd       	sbrc	r25, 3
 5a8:	85 91       	lpm	r24, Z+
 5aa:	93 ff       	sbrs	r25, 3
 5ac:	81 91       	ld	r24, Z+
 5ae:	7f 01       	movw	r14, r30
 5b0:	88 23       	and	r24, r24
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <vfprintf+0x62>
 5b4:	ad c1       	rjmp	.+858    	; 0x910 <vfprintf+0x3bc>
 5b6:	85 32       	cpi	r24, 0x25	; 37
 5b8:	39 f4       	brne	.+14     	; 0x5c8 <vfprintf+0x74>
 5ba:	93 fd       	sbrc	r25, 3
 5bc:	85 91       	lpm	r24, Z+
 5be:	93 ff       	sbrs	r25, 3
 5c0:	81 91       	ld	r24, Z+
 5c2:	7f 01       	movw	r14, r30
 5c4:	85 32       	cpi	r24, 0x25	; 37
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <vfprintf+0x7c>
 5c8:	b6 01       	movw	r22, r12
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	d6 d1       	rcall	.+940    	; 0x97a <fputc>
 5ce:	e8 cf       	rjmp	.-48     	; 0x5a0 <vfprintf+0x4c>
 5d0:	91 2c       	mov	r9, r1
 5d2:	21 2c       	mov	r2, r1
 5d4:	31 2c       	mov	r3, r1
 5d6:	ff e1       	ldi	r31, 0x1F	; 31
 5d8:	f3 15       	cp	r31, r3
 5da:	d8 f0       	brcs	.+54     	; 0x612 <vfprintf+0xbe>
 5dc:	8b 32       	cpi	r24, 0x2B	; 43
 5de:	79 f0       	breq	.+30     	; 0x5fe <vfprintf+0xaa>
 5e0:	38 f4       	brcc	.+14     	; 0x5f0 <vfprintf+0x9c>
 5e2:	80 32       	cpi	r24, 0x20	; 32
 5e4:	79 f0       	breq	.+30     	; 0x604 <vfprintf+0xb0>
 5e6:	83 32       	cpi	r24, 0x23	; 35
 5e8:	a1 f4       	brne	.+40     	; 0x612 <vfprintf+0xbe>
 5ea:	23 2d       	mov	r18, r3
 5ec:	20 61       	ori	r18, 0x10	; 16
 5ee:	1d c0       	rjmp	.+58     	; 0x62a <vfprintf+0xd6>
 5f0:	8d 32       	cpi	r24, 0x2D	; 45
 5f2:	61 f0       	breq	.+24     	; 0x60c <vfprintf+0xb8>
 5f4:	80 33       	cpi	r24, 0x30	; 48
 5f6:	69 f4       	brne	.+26     	; 0x612 <vfprintf+0xbe>
 5f8:	23 2d       	mov	r18, r3
 5fa:	21 60       	ori	r18, 0x01	; 1
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <vfprintf+0xd6>
 5fe:	83 2d       	mov	r24, r3
 600:	82 60       	ori	r24, 0x02	; 2
 602:	38 2e       	mov	r3, r24
 604:	e3 2d       	mov	r30, r3
 606:	e4 60       	ori	r30, 0x04	; 4
 608:	3e 2e       	mov	r3, r30
 60a:	2a c0       	rjmp	.+84     	; 0x660 <vfprintf+0x10c>
 60c:	f3 2d       	mov	r31, r3
 60e:	f8 60       	ori	r31, 0x08	; 8
 610:	1d c0       	rjmp	.+58     	; 0x64c <vfprintf+0xf8>
 612:	37 fc       	sbrc	r3, 7
 614:	2d c0       	rjmp	.+90     	; 0x670 <vfprintf+0x11c>
 616:	20 ed       	ldi	r18, 0xD0	; 208
 618:	28 0f       	add	r18, r24
 61a:	2a 30       	cpi	r18, 0x0A	; 10
 61c:	40 f0       	brcs	.+16     	; 0x62e <vfprintf+0xda>
 61e:	8e 32       	cpi	r24, 0x2E	; 46
 620:	b9 f4       	brne	.+46     	; 0x650 <vfprintf+0xfc>
 622:	36 fc       	sbrc	r3, 6
 624:	75 c1       	rjmp	.+746    	; 0x910 <vfprintf+0x3bc>
 626:	23 2d       	mov	r18, r3
 628:	20 64       	ori	r18, 0x40	; 64
 62a:	32 2e       	mov	r3, r18
 62c:	19 c0       	rjmp	.+50     	; 0x660 <vfprintf+0x10c>
 62e:	36 fe       	sbrs	r3, 6
 630:	06 c0       	rjmp	.+12     	; 0x63e <vfprintf+0xea>
 632:	8a e0       	ldi	r24, 0x0A	; 10
 634:	98 9e       	mul	r9, r24
 636:	20 0d       	add	r18, r0
 638:	11 24       	eor	r1, r1
 63a:	92 2e       	mov	r9, r18
 63c:	11 c0       	rjmp	.+34     	; 0x660 <vfprintf+0x10c>
 63e:	ea e0       	ldi	r30, 0x0A	; 10
 640:	2e 9e       	mul	r2, r30
 642:	20 0d       	add	r18, r0
 644:	11 24       	eor	r1, r1
 646:	22 2e       	mov	r2, r18
 648:	f3 2d       	mov	r31, r3
 64a:	f0 62       	ori	r31, 0x20	; 32
 64c:	3f 2e       	mov	r3, r31
 64e:	08 c0       	rjmp	.+16     	; 0x660 <vfprintf+0x10c>
 650:	8c 36       	cpi	r24, 0x6C	; 108
 652:	21 f4       	brne	.+8      	; 0x65c <vfprintf+0x108>
 654:	83 2d       	mov	r24, r3
 656:	80 68       	ori	r24, 0x80	; 128
 658:	38 2e       	mov	r3, r24
 65a:	02 c0       	rjmp	.+4      	; 0x660 <vfprintf+0x10c>
 65c:	88 36       	cpi	r24, 0x68	; 104
 65e:	41 f4       	brne	.+16     	; 0x670 <vfprintf+0x11c>
 660:	f7 01       	movw	r30, r14
 662:	93 fd       	sbrc	r25, 3
 664:	85 91       	lpm	r24, Z+
 666:	93 ff       	sbrs	r25, 3
 668:	81 91       	ld	r24, Z+
 66a:	7f 01       	movw	r14, r30
 66c:	81 11       	cpse	r24, r1
 66e:	b3 cf       	rjmp	.-154    	; 0x5d6 <vfprintf+0x82>
 670:	98 2f       	mov	r25, r24
 672:	9f 7d       	andi	r25, 0xDF	; 223
 674:	95 54       	subi	r25, 0x45	; 69
 676:	93 30       	cpi	r25, 0x03	; 3
 678:	28 f4       	brcc	.+10     	; 0x684 <vfprintf+0x130>
 67a:	0c 5f       	subi	r16, 0xFC	; 252
 67c:	1f 4f       	sbci	r17, 0xFF	; 255
 67e:	9f e3       	ldi	r25, 0x3F	; 63
 680:	99 83       	std	Y+1, r25	; 0x01
 682:	0d c0       	rjmp	.+26     	; 0x69e <vfprintf+0x14a>
 684:	83 36       	cpi	r24, 0x63	; 99
 686:	31 f0       	breq	.+12     	; 0x694 <vfprintf+0x140>
 688:	83 37       	cpi	r24, 0x73	; 115
 68a:	71 f0       	breq	.+28     	; 0x6a8 <vfprintf+0x154>
 68c:	83 35       	cpi	r24, 0x53	; 83
 68e:	09 f0       	breq	.+2      	; 0x692 <vfprintf+0x13e>
 690:	55 c0       	rjmp	.+170    	; 0x73c <vfprintf+0x1e8>
 692:	20 c0       	rjmp	.+64     	; 0x6d4 <vfprintf+0x180>
 694:	f8 01       	movw	r30, r16
 696:	80 81       	ld	r24, Z
 698:	89 83       	std	Y+1, r24	; 0x01
 69a:	0e 5f       	subi	r16, 0xFE	; 254
 69c:	1f 4f       	sbci	r17, 0xFF	; 255
 69e:	88 24       	eor	r8, r8
 6a0:	83 94       	inc	r8
 6a2:	91 2c       	mov	r9, r1
 6a4:	53 01       	movw	r10, r6
 6a6:	12 c0       	rjmp	.+36     	; 0x6cc <vfprintf+0x178>
 6a8:	28 01       	movw	r4, r16
 6aa:	f2 e0       	ldi	r31, 0x02	; 2
 6ac:	4f 0e       	add	r4, r31
 6ae:	51 1c       	adc	r5, r1
 6b0:	f8 01       	movw	r30, r16
 6b2:	a0 80       	ld	r10, Z
 6b4:	b1 80       	ldd	r11, Z+1	; 0x01
 6b6:	36 fe       	sbrs	r3, 6
 6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <vfprintf+0x16c>
 6ba:	69 2d       	mov	r22, r9
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <vfprintf+0x170>
 6c0:	6f ef       	ldi	r22, 0xFF	; 255
 6c2:	7f ef       	ldi	r23, 0xFF	; 255
 6c4:	c5 01       	movw	r24, r10
 6c6:	4e d1       	rcall	.+668    	; 0x964 <strnlen>
 6c8:	4c 01       	movw	r8, r24
 6ca:	82 01       	movw	r16, r4
 6cc:	f3 2d       	mov	r31, r3
 6ce:	ff 77       	andi	r31, 0x7F	; 127
 6d0:	3f 2e       	mov	r3, r31
 6d2:	15 c0       	rjmp	.+42     	; 0x6fe <vfprintf+0x1aa>
 6d4:	28 01       	movw	r4, r16
 6d6:	22 e0       	ldi	r18, 0x02	; 2
 6d8:	42 0e       	add	r4, r18
 6da:	51 1c       	adc	r5, r1
 6dc:	f8 01       	movw	r30, r16
 6de:	a0 80       	ld	r10, Z
 6e0:	b1 80       	ldd	r11, Z+1	; 0x01
 6e2:	36 fe       	sbrs	r3, 6
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <vfprintf+0x198>
 6e6:	69 2d       	mov	r22, r9
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <vfprintf+0x19c>
 6ec:	6f ef       	ldi	r22, 0xFF	; 255
 6ee:	7f ef       	ldi	r23, 0xFF	; 255
 6f0:	c5 01       	movw	r24, r10
 6f2:	2d d1       	rcall	.+602    	; 0x94e <strnlen_P>
 6f4:	4c 01       	movw	r8, r24
 6f6:	f3 2d       	mov	r31, r3
 6f8:	f0 68       	ori	r31, 0x80	; 128
 6fa:	3f 2e       	mov	r3, r31
 6fc:	82 01       	movw	r16, r4
 6fe:	33 fc       	sbrc	r3, 3
 700:	19 c0       	rjmp	.+50     	; 0x734 <vfprintf+0x1e0>
 702:	82 2d       	mov	r24, r2
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	88 16       	cp	r8, r24
 708:	99 06       	cpc	r9, r25
 70a:	a0 f4       	brcc	.+40     	; 0x734 <vfprintf+0x1e0>
 70c:	b6 01       	movw	r22, r12
 70e:	80 e2       	ldi	r24, 0x20	; 32
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	33 d1       	rcall	.+614    	; 0x97a <fputc>
 714:	2a 94       	dec	r2
 716:	f5 cf       	rjmp	.-22     	; 0x702 <vfprintf+0x1ae>
 718:	f5 01       	movw	r30, r10
 71a:	37 fc       	sbrc	r3, 7
 71c:	85 91       	lpm	r24, Z+
 71e:	37 fe       	sbrs	r3, 7
 720:	81 91       	ld	r24, Z+
 722:	5f 01       	movw	r10, r30
 724:	b6 01       	movw	r22, r12
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	28 d1       	rcall	.+592    	; 0x97a <fputc>
 72a:	21 10       	cpse	r2, r1
 72c:	2a 94       	dec	r2
 72e:	21 e0       	ldi	r18, 0x01	; 1
 730:	82 1a       	sub	r8, r18
 732:	91 08       	sbc	r9, r1
 734:	81 14       	cp	r8, r1
 736:	91 04       	cpc	r9, r1
 738:	79 f7       	brne	.-34     	; 0x718 <vfprintf+0x1c4>
 73a:	e1 c0       	rjmp	.+450    	; 0x8fe <vfprintf+0x3aa>
 73c:	84 36       	cpi	r24, 0x64	; 100
 73e:	11 f0       	breq	.+4      	; 0x744 <vfprintf+0x1f0>
 740:	89 36       	cpi	r24, 0x69	; 105
 742:	39 f5       	brne	.+78     	; 0x792 <vfprintf+0x23e>
 744:	f8 01       	movw	r30, r16
 746:	37 fe       	sbrs	r3, 7
 748:	07 c0       	rjmp	.+14     	; 0x758 <vfprintf+0x204>
 74a:	60 81       	ld	r22, Z
 74c:	71 81       	ldd	r23, Z+1	; 0x01
 74e:	82 81       	ldd	r24, Z+2	; 0x02
 750:	93 81       	ldd	r25, Z+3	; 0x03
 752:	0c 5f       	subi	r16, 0xFC	; 252
 754:	1f 4f       	sbci	r17, 0xFF	; 255
 756:	08 c0       	rjmp	.+16     	; 0x768 <vfprintf+0x214>
 758:	60 81       	ld	r22, Z
 75a:	71 81       	ldd	r23, Z+1	; 0x01
 75c:	07 2e       	mov	r0, r23
 75e:	00 0c       	add	r0, r0
 760:	88 0b       	sbc	r24, r24
 762:	99 0b       	sbc	r25, r25
 764:	0e 5f       	subi	r16, 0xFE	; 254
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	f3 2d       	mov	r31, r3
 76a:	ff 76       	andi	r31, 0x6F	; 111
 76c:	3f 2e       	mov	r3, r31
 76e:	97 ff       	sbrs	r25, 7
 770:	09 c0       	rjmp	.+18     	; 0x784 <vfprintf+0x230>
 772:	90 95       	com	r25
 774:	80 95       	com	r24
 776:	70 95       	com	r23
 778:	61 95       	neg	r22
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	f0 68       	ori	r31, 0x80	; 128
 782:	3f 2e       	mov	r3, r31
 784:	2a e0       	ldi	r18, 0x0A	; 10
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	a3 01       	movw	r20, r6
 78a:	33 d1       	rcall	.+614    	; 0x9f2 <__ultoa_invert>
 78c:	88 2e       	mov	r8, r24
 78e:	86 18       	sub	r8, r6
 790:	44 c0       	rjmp	.+136    	; 0x81a <vfprintf+0x2c6>
 792:	85 37       	cpi	r24, 0x75	; 117
 794:	31 f4       	brne	.+12     	; 0x7a2 <vfprintf+0x24e>
 796:	23 2d       	mov	r18, r3
 798:	2f 7e       	andi	r18, 0xEF	; 239
 79a:	b2 2e       	mov	r11, r18
 79c:	2a e0       	ldi	r18, 0x0A	; 10
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	25 c0       	rjmp	.+74     	; 0x7ec <vfprintf+0x298>
 7a2:	93 2d       	mov	r25, r3
 7a4:	99 7f       	andi	r25, 0xF9	; 249
 7a6:	b9 2e       	mov	r11, r25
 7a8:	8f 36       	cpi	r24, 0x6F	; 111
 7aa:	c1 f0       	breq	.+48     	; 0x7dc <vfprintf+0x288>
 7ac:	18 f4       	brcc	.+6      	; 0x7b4 <vfprintf+0x260>
 7ae:	88 35       	cpi	r24, 0x58	; 88
 7b0:	79 f0       	breq	.+30     	; 0x7d0 <vfprintf+0x27c>
 7b2:	ae c0       	rjmp	.+348    	; 0x910 <vfprintf+0x3bc>
 7b4:	80 37       	cpi	r24, 0x70	; 112
 7b6:	19 f0       	breq	.+6      	; 0x7be <vfprintf+0x26a>
 7b8:	88 37       	cpi	r24, 0x78	; 120
 7ba:	21 f0       	breq	.+8      	; 0x7c4 <vfprintf+0x270>
 7bc:	a9 c0       	rjmp	.+338    	; 0x910 <vfprintf+0x3bc>
 7be:	e9 2f       	mov	r30, r25
 7c0:	e0 61       	ori	r30, 0x10	; 16
 7c2:	be 2e       	mov	r11, r30
 7c4:	b4 fe       	sbrs	r11, 4
 7c6:	0d c0       	rjmp	.+26     	; 0x7e2 <vfprintf+0x28e>
 7c8:	fb 2d       	mov	r31, r11
 7ca:	f4 60       	ori	r31, 0x04	; 4
 7cc:	bf 2e       	mov	r11, r31
 7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <vfprintf+0x28e>
 7d0:	34 fe       	sbrs	r3, 4
 7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <vfprintf+0x294>
 7d4:	29 2f       	mov	r18, r25
 7d6:	26 60       	ori	r18, 0x06	; 6
 7d8:	b2 2e       	mov	r11, r18
 7da:	06 c0       	rjmp	.+12     	; 0x7e8 <vfprintf+0x294>
 7dc:	28 e0       	ldi	r18, 0x08	; 8
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	05 c0       	rjmp	.+10     	; 0x7ec <vfprintf+0x298>
 7e2:	20 e1       	ldi	r18, 0x10	; 16
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0x298>
 7e8:	20 e1       	ldi	r18, 0x10	; 16
 7ea:	32 e0       	ldi	r19, 0x02	; 2
 7ec:	f8 01       	movw	r30, r16
 7ee:	b7 fe       	sbrs	r11, 7
 7f0:	07 c0       	rjmp	.+14     	; 0x800 <vfprintf+0x2ac>
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	82 81       	ldd	r24, Z+2	; 0x02
 7f8:	93 81       	ldd	r25, Z+3	; 0x03
 7fa:	0c 5f       	subi	r16, 0xFC	; 252
 7fc:	1f 4f       	sbci	r17, 0xFF	; 255
 7fe:	06 c0       	rjmp	.+12     	; 0x80c <vfprintf+0x2b8>
 800:	60 81       	ld	r22, Z
 802:	71 81       	ldd	r23, Z+1	; 0x01
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 5f       	subi	r16, 0xFE	; 254
 80a:	1f 4f       	sbci	r17, 0xFF	; 255
 80c:	a3 01       	movw	r20, r6
 80e:	f1 d0       	rcall	.+482    	; 0x9f2 <__ultoa_invert>
 810:	88 2e       	mov	r8, r24
 812:	86 18       	sub	r8, r6
 814:	fb 2d       	mov	r31, r11
 816:	ff 77       	andi	r31, 0x7F	; 127
 818:	3f 2e       	mov	r3, r31
 81a:	36 fe       	sbrs	r3, 6
 81c:	0d c0       	rjmp	.+26     	; 0x838 <vfprintf+0x2e4>
 81e:	23 2d       	mov	r18, r3
 820:	2e 7f       	andi	r18, 0xFE	; 254
 822:	a2 2e       	mov	r10, r18
 824:	89 14       	cp	r8, r9
 826:	58 f4       	brcc	.+22     	; 0x83e <vfprintf+0x2ea>
 828:	34 fe       	sbrs	r3, 4
 82a:	0b c0       	rjmp	.+22     	; 0x842 <vfprintf+0x2ee>
 82c:	32 fc       	sbrc	r3, 2
 82e:	09 c0       	rjmp	.+18     	; 0x842 <vfprintf+0x2ee>
 830:	83 2d       	mov	r24, r3
 832:	8e 7e       	andi	r24, 0xEE	; 238
 834:	a8 2e       	mov	r10, r24
 836:	05 c0       	rjmp	.+10     	; 0x842 <vfprintf+0x2ee>
 838:	b8 2c       	mov	r11, r8
 83a:	a3 2c       	mov	r10, r3
 83c:	03 c0       	rjmp	.+6      	; 0x844 <vfprintf+0x2f0>
 83e:	b8 2c       	mov	r11, r8
 840:	01 c0       	rjmp	.+2      	; 0x844 <vfprintf+0x2f0>
 842:	b9 2c       	mov	r11, r9
 844:	a4 fe       	sbrs	r10, 4
 846:	0f c0       	rjmp	.+30     	; 0x866 <vfprintf+0x312>
 848:	fe 01       	movw	r30, r28
 84a:	e8 0d       	add	r30, r8
 84c:	f1 1d       	adc	r31, r1
 84e:	80 81       	ld	r24, Z
 850:	80 33       	cpi	r24, 0x30	; 48
 852:	21 f4       	brne	.+8      	; 0x85c <vfprintf+0x308>
 854:	9a 2d       	mov	r25, r10
 856:	99 7e       	andi	r25, 0xE9	; 233
 858:	a9 2e       	mov	r10, r25
 85a:	09 c0       	rjmp	.+18     	; 0x86e <vfprintf+0x31a>
 85c:	a2 fe       	sbrs	r10, 2
 85e:	06 c0       	rjmp	.+12     	; 0x86c <vfprintf+0x318>
 860:	b3 94       	inc	r11
 862:	b3 94       	inc	r11
 864:	04 c0       	rjmp	.+8      	; 0x86e <vfprintf+0x31a>
 866:	8a 2d       	mov	r24, r10
 868:	86 78       	andi	r24, 0x86	; 134
 86a:	09 f0       	breq	.+2      	; 0x86e <vfprintf+0x31a>
 86c:	b3 94       	inc	r11
 86e:	a3 fc       	sbrc	r10, 3
 870:	10 c0       	rjmp	.+32     	; 0x892 <vfprintf+0x33e>
 872:	a0 fe       	sbrs	r10, 0
 874:	06 c0       	rjmp	.+12     	; 0x882 <vfprintf+0x32e>
 876:	b2 14       	cp	r11, r2
 878:	80 f4       	brcc	.+32     	; 0x89a <vfprintf+0x346>
 87a:	28 0c       	add	r2, r8
 87c:	92 2c       	mov	r9, r2
 87e:	9b 18       	sub	r9, r11
 880:	0d c0       	rjmp	.+26     	; 0x89c <vfprintf+0x348>
 882:	b2 14       	cp	r11, r2
 884:	58 f4       	brcc	.+22     	; 0x89c <vfprintf+0x348>
 886:	b6 01       	movw	r22, r12
 888:	80 e2       	ldi	r24, 0x20	; 32
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	76 d0       	rcall	.+236    	; 0x97a <fputc>
 88e:	b3 94       	inc	r11
 890:	f8 cf       	rjmp	.-16     	; 0x882 <vfprintf+0x32e>
 892:	b2 14       	cp	r11, r2
 894:	18 f4       	brcc	.+6      	; 0x89c <vfprintf+0x348>
 896:	2b 18       	sub	r2, r11
 898:	02 c0       	rjmp	.+4      	; 0x89e <vfprintf+0x34a>
 89a:	98 2c       	mov	r9, r8
 89c:	21 2c       	mov	r2, r1
 89e:	a4 fe       	sbrs	r10, 4
 8a0:	0f c0       	rjmp	.+30     	; 0x8c0 <vfprintf+0x36c>
 8a2:	b6 01       	movw	r22, r12
 8a4:	80 e3       	ldi	r24, 0x30	; 48
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	68 d0       	rcall	.+208    	; 0x97a <fputc>
 8aa:	a2 fe       	sbrs	r10, 2
 8ac:	16 c0       	rjmp	.+44     	; 0x8da <vfprintf+0x386>
 8ae:	a1 fc       	sbrc	r10, 1
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <vfprintf+0x364>
 8b2:	88 e7       	ldi	r24, 0x78	; 120
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <vfprintf+0x368>
 8b8:	88 e5       	ldi	r24, 0x58	; 88
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	b6 01       	movw	r22, r12
 8be:	0c c0       	rjmp	.+24     	; 0x8d8 <vfprintf+0x384>
 8c0:	8a 2d       	mov	r24, r10
 8c2:	86 78       	andi	r24, 0x86	; 134
 8c4:	51 f0       	breq	.+20     	; 0x8da <vfprintf+0x386>
 8c6:	a1 fe       	sbrs	r10, 1
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x37a>
 8ca:	8b e2       	ldi	r24, 0x2B	; 43
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <vfprintf+0x37c>
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	a7 fc       	sbrc	r10, 7
 8d2:	8d e2       	ldi	r24, 0x2D	; 45
 8d4:	b6 01       	movw	r22, r12
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	50 d0       	rcall	.+160    	; 0x97a <fputc>
 8da:	89 14       	cp	r8, r9
 8dc:	30 f4       	brcc	.+12     	; 0x8ea <vfprintf+0x396>
 8de:	b6 01       	movw	r22, r12
 8e0:	80 e3       	ldi	r24, 0x30	; 48
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	4a d0       	rcall	.+148    	; 0x97a <fputc>
 8e6:	9a 94       	dec	r9
 8e8:	f8 cf       	rjmp	.-16     	; 0x8da <vfprintf+0x386>
 8ea:	8a 94       	dec	r8
 8ec:	f3 01       	movw	r30, r6
 8ee:	e8 0d       	add	r30, r8
 8f0:	f1 1d       	adc	r31, r1
 8f2:	80 81       	ld	r24, Z
 8f4:	b6 01       	movw	r22, r12
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	40 d0       	rcall	.+128    	; 0x97a <fputc>
 8fa:	81 10       	cpse	r8, r1
 8fc:	f6 cf       	rjmp	.-20     	; 0x8ea <vfprintf+0x396>
 8fe:	22 20       	and	r2, r2
 900:	09 f4       	brne	.+2      	; 0x904 <vfprintf+0x3b0>
 902:	4e ce       	rjmp	.-868    	; 0x5a0 <vfprintf+0x4c>
 904:	b6 01       	movw	r22, r12
 906:	80 e2       	ldi	r24, 0x20	; 32
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	37 d0       	rcall	.+110    	; 0x97a <fputc>
 90c:	2a 94       	dec	r2
 90e:	f7 cf       	rjmp	.-18     	; 0x8fe <vfprintf+0x3aa>
 910:	f6 01       	movw	r30, r12
 912:	86 81       	ldd	r24, Z+6	; 0x06
 914:	97 81       	ldd	r25, Z+7	; 0x07
 916:	02 c0       	rjmp	.+4      	; 0x91c <vfprintf+0x3c8>
 918:	8f ef       	ldi	r24, 0xFF	; 255
 91a:	9f ef       	ldi	r25, 0xFF	; 255
 91c:	2b 96       	adiw	r28, 0x0b	; 11
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	f8 94       	cli
 922:	de bf       	out	0x3e, r29	; 62
 924:	0f be       	out	0x3f, r0	; 63
 926:	cd bf       	out	0x3d, r28	; 61
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	ff 90       	pop	r15
 932:	ef 90       	pop	r14
 934:	df 90       	pop	r13
 936:	cf 90       	pop	r12
 938:	bf 90       	pop	r11
 93a:	af 90       	pop	r10
 93c:	9f 90       	pop	r9
 93e:	8f 90       	pop	r8
 940:	7f 90       	pop	r7
 942:	6f 90       	pop	r6
 944:	5f 90       	pop	r5
 946:	4f 90       	pop	r4
 948:	3f 90       	pop	r3
 94a:	2f 90       	pop	r2
 94c:	08 95       	ret

0000094e <strnlen_P>:
 94e:	fc 01       	movw	r30, r24
 950:	05 90       	lpm	r0, Z+
 952:	61 50       	subi	r22, 0x01	; 1
 954:	70 40       	sbci	r23, 0x00	; 0
 956:	01 10       	cpse	r0, r1
 958:	d8 f7       	brcc	.-10     	; 0x950 <strnlen_P+0x2>
 95a:	80 95       	com	r24
 95c:	90 95       	com	r25
 95e:	8e 0f       	add	r24, r30
 960:	9f 1f       	adc	r25, r31
 962:	08 95       	ret

00000964 <strnlen>:
 964:	fc 01       	movw	r30, r24
 966:	61 50       	subi	r22, 0x01	; 1
 968:	70 40       	sbci	r23, 0x00	; 0
 96a:	01 90       	ld	r0, Z+
 96c:	01 10       	cpse	r0, r1
 96e:	d8 f7       	brcc	.-10     	; 0x966 <strnlen+0x2>
 970:	80 95       	com	r24
 972:	90 95       	com	r25
 974:	8e 0f       	add	r24, r30
 976:	9f 1f       	adc	r25, r31
 978:	08 95       	ret

0000097a <fputc>:
 97a:	0f 93       	push	r16
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	fb 01       	movw	r30, r22
 984:	23 81       	ldd	r18, Z+3	; 0x03
 986:	21 fd       	sbrc	r18, 1
 988:	03 c0       	rjmp	.+6      	; 0x990 <fputc+0x16>
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	9f ef       	ldi	r25, 0xFF	; 255
 98e:	2c c0       	rjmp	.+88     	; 0x9e8 <fputc+0x6e>
 990:	22 ff       	sbrs	r18, 2
 992:	16 c0       	rjmp	.+44     	; 0x9c0 <fputc+0x46>
 994:	46 81       	ldd	r20, Z+6	; 0x06
 996:	57 81       	ldd	r21, Z+7	; 0x07
 998:	24 81       	ldd	r18, Z+4	; 0x04
 99a:	35 81       	ldd	r19, Z+5	; 0x05
 99c:	42 17       	cp	r20, r18
 99e:	53 07       	cpc	r21, r19
 9a0:	44 f4       	brge	.+16     	; 0x9b2 <fputc+0x38>
 9a2:	a0 81       	ld	r26, Z
 9a4:	b1 81       	ldd	r27, Z+1	; 0x01
 9a6:	9d 01       	movw	r18, r26
 9a8:	2f 5f       	subi	r18, 0xFF	; 255
 9aa:	3f 4f       	sbci	r19, 0xFF	; 255
 9ac:	31 83       	std	Z+1, r19	; 0x01
 9ae:	20 83       	st	Z, r18
 9b0:	8c 93       	st	X, r24
 9b2:	26 81       	ldd	r18, Z+6	; 0x06
 9b4:	37 81       	ldd	r19, Z+7	; 0x07
 9b6:	2f 5f       	subi	r18, 0xFF	; 255
 9b8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ba:	37 83       	std	Z+7, r19	; 0x07
 9bc:	26 83       	std	Z+6, r18	; 0x06
 9be:	14 c0       	rjmp	.+40     	; 0x9e8 <fputc+0x6e>
 9c0:	8b 01       	movw	r16, r22
 9c2:	ec 01       	movw	r28, r24
 9c4:	fb 01       	movw	r30, r22
 9c6:	00 84       	ldd	r0, Z+8	; 0x08
 9c8:	f1 85       	ldd	r31, Z+9	; 0x09
 9ca:	e0 2d       	mov	r30, r0
 9cc:	09 95       	icall
 9ce:	89 2b       	or	r24, r25
 9d0:	e1 f6       	brne	.-72     	; 0x98a <fputc+0x10>
 9d2:	d8 01       	movw	r26, r16
 9d4:	16 96       	adiw	r26, 0x06	; 6
 9d6:	8d 91       	ld	r24, X+
 9d8:	9c 91       	ld	r25, X
 9da:	17 97       	sbiw	r26, 0x07	; 7
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	17 96       	adiw	r26, 0x07	; 7
 9e0:	9c 93       	st	X, r25
 9e2:	8e 93       	st	-X, r24
 9e4:	16 97       	sbiw	r26, 0x06	; 6
 9e6:	ce 01       	movw	r24, r28
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	1f 91       	pop	r17
 9ee:	0f 91       	pop	r16
 9f0:	08 95       	ret

000009f2 <__ultoa_invert>:
 9f2:	fa 01       	movw	r30, r20
 9f4:	aa 27       	eor	r26, r26
 9f6:	28 30       	cpi	r18, 0x08	; 8
 9f8:	51 f1       	breq	.+84     	; 0xa4e <__ultoa_invert+0x5c>
 9fa:	20 31       	cpi	r18, 0x10	; 16
 9fc:	81 f1       	breq	.+96     	; 0xa5e <__ultoa_invert+0x6c>
 9fe:	e8 94       	clt
 a00:	6f 93       	push	r22
 a02:	6e 7f       	andi	r22, 0xFE	; 254
 a04:	6e 5f       	subi	r22, 0xFE	; 254
 a06:	7f 4f       	sbci	r23, 0xFF	; 255
 a08:	8f 4f       	sbci	r24, 0xFF	; 255
 a0a:	9f 4f       	sbci	r25, 0xFF	; 255
 a0c:	af 4f       	sbci	r26, 0xFF	; 255
 a0e:	b1 e0       	ldi	r27, 0x01	; 1
 a10:	3e d0       	rcall	.+124    	; 0xa8e <__ultoa_invert+0x9c>
 a12:	b4 e0       	ldi	r27, 0x04	; 4
 a14:	3c d0       	rcall	.+120    	; 0xa8e <__ultoa_invert+0x9c>
 a16:	67 0f       	add	r22, r23
 a18:	78 1f       	adc	r23, r24
 a1a:	89 1f       	adc	r24, r25
 a1c:	9a 1f       	adc	r25, r26
 a1e:	a1 1d       	adc	r26, r1
 a20:	68 0f       	add	r22, r24
 a22:	79 1f       	adc	r23, r25
 a24:	8a 1f       	adc	r24, r26
 a26:	91 1d       	adc	r25, r1
 a28:	a1 1d       	adc	r26, r1
 a2a:	6a 0f       	add	r22, r26
 a2c:	71 1d       	adc	r23, r1
 a2e:	81 1d       	adc	r24, r1
 a30:	91 1d       	adc	r25, r1
 a32:	a1 1d       	adc	r26, r1
 a34:	20 d0       	rcall	.+64     	; 0xa76 <__ultoa_invert+0x84>
 a36:	09 f4       	brne	.+2      	; 0xa3a <__ultoa_invert+0x48>
 a38:	68 94       	set
 a3a:	3f 91       	pop	r19
 a3c:	2a e0       	ldi	r18, 0x0A	; 10
 a3e:	26 9f       	mul	r18, r22
 a40:	11 24       	eor	r1, r1
 a42:	30 19       	sub	r19, r0
 a44:	30 5d       	subi	r19, 0xD0	; 208
 a46:	31 93       	st	Z+, r19
 a48:	de f6       	brtc	.-74     	; 0xa00 <__ultoa_invert+0xe>
 a4a:	cf 01       	movw	r24, r30
 a4c:	08 95       	ret
 a4e:	46 2f       	mov	r20, r22
 a50:	47 70       	andi	r20, 0x07	; 7
 a52:	40 5d       	subi	r20, 0xD0	; 208
 a54:	41 93       	st	Z+, r20
 a56:	b3 e0       	ldi	r27, 0x03	; 3
 a58:	0f d0       	rcall	.+30     	; 0xa78 <__ultoa_invert+0x86>
 a5a:	c9 f7       	brne	.-14     	; 0xa4e <__ultoa_invert+0x5c>
 a5c:	f6 cf       	rjmp	.-20     	; 0xa4a <__ultoa_invert+0x58>
 a5e:	46 2f       	mov	r20, r22
 a60:	4f 70       	andi	r20, 0x0F	; 15
 a62:	40 5d       	subi	r20, 0xD0	; 208
 a64:	4a 33       	cpi	r20, 0x3A	; 58
 a66:	18 f0       	brcs	.+6      	; 0xa6e <__ultoa_invert+0x7c>
 a68:	49 5d       	subi	r20, 0xD9	; 217
 a6a:	31 fd       	sbrc	r19, 1
 a6c:	40 52       	subi	r20, 0x20	; 32
 a6e:	41 93       	st	Z+, r20
 a70:	02 d0       	rcall	.+4      	; 0xa76 <__ultoa_invert+0x84>
 a72:	a9 f7       	brne	.-22     	; 0xa5e <__ultoa_invert+0x6c>
 a74:	ea cf       	rjmp	.-44     	; 0xa4a <__ultoa_invert+0x58>
 a76:	b4 e0       	ldi	r27, 0x04	; 4
 a78:	a6 95       	lsr	r26
 a7a:	97 95       	ror	r25
 a7c:	87 95       	ror	r24
 a7e:	77 95       	ror	r23
 a80:	67 95       	ror	r22
 a82:	ba 95       	dec	r27
 a84:	c9 f7       	brne	.-14     	; 0xa78 <__ultoa_invert+0x86>
 a86:	00 97       	sbiw	r24, 0x00	; 0
 a88:	61 05       	cpc	r22, r1
 a8a:	71 05       	cpc	r23, r1
 a8c:	08 95       	ret
 a8e:	9b 01       	movw	r18, r22
 a90:	ac 01       	movw	r20, r24
 a92:	0a 2e       	mov	r0, r26
 a94:	06 94       	lsr	r0
 a96:	57 95       	ror	r21
 a98:	47 95       	ror	r20
 a9a:	37 95       	ror	r19
 a9c:	27 95       	ror	r18
 a9e:	ba 95       	dec	r27
 aa0:	c9 f7       	brne	.-14     	; 0xa94 <__ultoa_invert+0xa2>
 aa2:	62 0f       	add	r22, r18
 aa4:	73 1f       	adc	r23, r19
 aa6:	84 1f       	adc	r24, r20
 aa8:	95 1f       	adc	r25, r21
 aaa:	a0 1d       	adc	r26, r0
 aac:	08 95       	ret

00000aae <_exit>:
 aae:	f8 94       	cli

00000ab0 <__stop_program>:
 ab0:	ff cf       	rjmp	.-2      	; 0xab0 <__stop_program>
